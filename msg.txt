

Experto en desarrollo m√≥vil con React
atue como especialista mobile de react
¬°Claro! Como especialista en desarrollo m√≥vil con React, puedo ayudarte con una variedad de temas relacionados con la creaci√≥n de aplicaciones m√≥viles utilizando tecnolog√≠as como React Native, Expo, y otras herramientas asociadas. Aqu√≠ tienes algunas √°reas en las que puedo asistirte:

1. Configuraci√≥n de Entorno de Desarrollo
Configurar React Native en tu m√°quina (Windows, macOS, Linux).

Usar Expo para desarrollo r√°pido.

Configurar emuladores (Android Studio, Xcode) o usar dispositivos f√≠sicos.

2. Estructura de Proyectos
Organizaci√≥n de carpetas y archivos.

Uso de herramientas como React Navigation para la navegaci√≥n.

Integraci√≥n de estilos con StyleSheet, Styled Components, o librer√≠as como NativeBase o React Native Paper.

3. Componentes y Funcionalidades
Creaci√≥n de componentes reutilizables.

Uso de Hooks (useState, useEffect, useContext, etc.).

Manejo de estados globales con Redux, MobX, o Context API.

Integraci√≥n de APIs REST o GraphQL con Axios, Fetch, o Apollo Client.

4. Acceso a Funcionalidades del Dispositivo
Uso de la c√°mara con expo-camera o react-native-camera.

Geolocalizaci√≥n con expo-location o react-native-maps.

Notificaciones push con expo-notifications o Firebase Cloud Messaging.

Almacenamiento local con AsyncStorage o SQLite.

5. Despliegue y Publicaci√≥n
Generaci√≥n de archivos APK (Android) y IPA (iOS).

Publicaci√≥n en Google Play Store y Apple App Store.

Uso de Fastlane para automatizar el proceso de despliegue.

6. Optimizaci√≥n y Mejores Pr√°cticas
Mejora del rendimiento de la aplicaci√≥n.

Reducci√≥n del tama√±o del bundle.

Uso de Hermes como motor JavaScript.

Pruebas unitarias y de integraci√≥n con Jest y React Testing Library.

7. Solucionar Problemas Comunes
Errores de compilaci√≥n en iOS y Android.

Problemas con dependencias y versiones.

Depuraci√≥n de aplicaciones con React Native Debugger o Flipper.

8. Integraci√≥n con Backend y Servicios en la Nube
Autenticaci√≥n con Firebase, Auth0, o soluciones personalizadas.

Almacenamiento en la nube con Firebase Storage, AWS S3, etc.

Sincronizaci√≥n de datos en tiempo real con Firebase Firestore o Socket.IO.

9. Tendencias y Librer√≠as Populares
Animaciones con React Native Reanimated o Lottie.

Uso de React Query para manejo de datos.

Integraci√≥n de TypeScript para un desarrollo m√°s seguro.

Si tienes alguna pregunta espec√≠fica, un problema que resolver, o necesitas una gu√≠a paso a paso sobre alg√∫n tema, ¬°no dudes en preguntar! üòä

¬øEn qu√© puedo ayudarte hoy? üöÄ

me ajude a iniciar o projeto
Claro! Vou te guiar passo a passo para iniciar um projeto React Native do zero. Vamos configurar o ambiente e criar um projeto b√°sico. Escolha uma das op√ß√µes abaixo:

Op√ß√£o 1: Usando Expo (recomendado para iniciantes)
O Expo √© uma ferramenta que facilita o desenvolvimento com React Native, pois abstrai muita complexidade de configura√ß√£o.

Passos para iniciar:
Instale o Node.js:

Certifique-se de ter o Node.js instalado. Baixe em nodejs.org.

Instale o Expo CLI:

Abra o terminal e execute:

bash
Copy
npm install -g expo-cli
Crie um novo projeto:

No terminal, execute:

bash
Copy
expo init MeuProjeto
Escolha um template (recomendo o "blank" para come√ßar).

Navegue at√© a pasta do projeto:

bash
Copy
cd MeuProjeto
Inicie o projeto:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

Op√ß√£o 2: Configura√ß√£o Manual (React Native CLI)
Se voc√™ prefere mais controle sobre o projeto e precisa de funcionalidades nativas, siga esses passos:

Passos para iniciar:
Instale o Node.js:

Baixe e instale o Node.js em nodejs.org.

Instale o React Native CLI:

No terminal, execute:

bash
Copy
npm install -g react-native-cli
Instale as depend√™ncias para Android e iOS:

Android: Instale o Android Studio e configure o ambiente conforme o guia oficial.

iOS: Certifique-se de ter o Xcode instalado (apenas para macOS).

Crie um novo projeto:

No terminal, execute:

bash
Copy
npx react-native init MeuProjeto
Navegue at√© a pasta do projeto:

bash
Copy
cd MeuProjeto
Execute o projeto:

Para Android:

bash
Copy
npx react-native run-android
Para iOS:

bash
Copy
npx react-native run-ios
Estrutura Inicial do Projeto
Ap√≥s criar o projeto, voc√™ ver√° uma estrutura de pastas semelhante a esta:

Copy
MeuProjeto/
‚îú‚îÄ‚îÄ android/          # C√≥digo nativo Android
‚îú‚îÄ‚îÄ ios/             # C√≥digo nativo iOS
‚îú‚îÄ‚îÄ node_modules/    # Depend√™ncias instaladas
‚îú‚îÄ‚îÄ assets/          # Arquivos est√°ticos (imagens, fonts, etc.)
‚îú‚îÄ‚îÄ src/             # Pasta para o c√≥digo da aplica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ components/  # Componentes reutiliz√°veis
‚îÇ   ‚îú‚îÄ‚îÄ screens/     # Telas da aplica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ App.js       # Ponto de entrada da aplica√ß√£o
‚îú‚îÄ‚îÄ package.json     # Depend√™ncias e scripts do projeto
Primeiras Altera√ß√µes
Abra o arquivo App.js no seu editor de c√≥digo.

Substitua o conte√∫do por algo simples, como:

javascript
Copy
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

const App = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Ol√°, Mundo!</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
  },
});

export default App;
Salve o arquivo e veja as mudan√ßas refletidas no seu dispositivo ou emulador.

Pr√≥ximos Passos
Adicione navega√ß√£o com React Navigation.

Integre APIs ou funcionalidades nativas.

Comece a estruturar seu projeto em componentes e telas.

Se precisar de ajuda em qualquer etapa, √© s√≥ perguntar! üöÄ

üéµ React Native Music Player Check Point üéß
Bem-vindos ao desafio do Music Player! üöÄ Voc√™s foram convocados para criar um player de m√∫sica simples, por√©m funcional, usando React Native. O objetivo √© testar sua capacidade de transformar um problema em uma solu√ß√£o pr√°tica e bem estruturada.

Mas aten√ß√£o! Isso n√£o √© s√≥ uma prova, √© uma miss√£o. E como toda miss√£o, tem regras claras. Vamos l√°?

üéØ O que voc√™ precisa fazer?
Seu desafio √© criar um app que simula um player de m√∫sica. Assista ao v√≠deo de refer√™ncia (dispon√≠vel no reposit√≥rio) para entender exatamente como o app deve funcionar. A partir do v√≠deo, voc√™ deve identificar as funcionalidades necess√°rias e implement√°-las.

Dica: Preste aten√ß√£o nos detalhes visuais e nas intera√ß√µes do usu√°rio. O layout foi inspirado no Musium - Music App UI, que voc√™ pode consultar aqui para refer√™ncia de cores, espa√ßamentos e outros detalhes. Mas n√£o se preocupe em replicar tudo pixel a pixel. O importante √© que o visual esteja pr√≥ximo do que foi mostrado no v√≠deo.

Ah, e n√£o se esque√ßa: no rodap√© do app, deve constar seu RM e nome completo. Isso √© obrigat√≥rio!
Okay, the user is asking for help to create a React Native music player app based on a specific design and functionality. Let me break down the requirements and figure out the best approach.

First, they mentioned a reference video and a design inspired by Musium. So the app needs to have a similar UI, but not pixel-perfect. The key features include play/pause, skip tracks, a progress bar, and displaying track info. Also, the footer must have the user's RM and name.

I need to outline the steps. Let's start with setting up the project. Since the user might be familiar with Expo from the previous conversation, recommending Expo again makes sense for simplicity.

Next, the main components: a header, artwork display, track info, progress bar, controls, and footer. For the progress bar, using a View with a dynamic width based on the current time would work. But maybe a library like react-native-slider could offer more features, but keeping it simple with a custom bar might be better for now.

Playback functionality. Since Expo has an Audio API, using expo-av would handle playing the audio. Need to manage the state for playing/pausing, current time, and duration. Using useState and useEffect hooks will be necessary for state management and updating the progress bar.

For the track list, an array of objects with track details. The user can loop through these. Skipping tracks involves changing the current track index and updating the audio source.

Styling is important. The user provided a color palette from Musium, so applying those colors consistently. Using StyleSheet for styles and ensuring the layout is responsive with flexbox.

Testing on both iOS and Android. Make sure touchable components like buttons work on both platforms. Using TouchableOpacity for buttons.

The footer needs to display RM and name, so a simple Text component at the bottom.

Potential issues: Handling async operations with Expo Audio, correctly updating the progress bar without lag. Maybe using setInterval to update the current time every second. Also, ensuring that the app correctly loads the next track and handles the end of a track.

Dependencies: Install expo-av and react-native-vector-icons for the icons. Vector icons are necessary for the play, pause, skip buttons.

Putting it all together, the code structure would have a main App component with state variables, effects for loading the sound, and handlers for play/pause and skip. The UI components are structured in a View with all the sections.

I should also mention possible extensions like adding a playlist, animations, or more features, but focus on the core requirements first. Remind the user to replace placeholder data with their actual tracks and personal info in the footer.

Finally, testing the app on a real device using Expo Go would help catch any issues early. Make sure all the touch interactions are smooth and the audio plays correctly.

(Due to technical issues, the search service is temporarily unavailable.)

Vamos criar esse player de m√∫sica juntos! üöÄ Segue um guia estruturado para implementa√ß√£o:

üìã Requisitos Principais (Baseado no V√≠deo)
UI Principal

Capa do √°lbum animada

Controles de play/pause

Bot√µes de pr√≥xima/anterior

Barra de progresso da m√∫sica

Exibi√ß√£o de tempo decorrido/total

Nome da m√∫sica e artista

Funcionalidades

Play/Pause com anima√ß√£o

Progresso atualizado em tempo real

Troca de faixas

Gestos para controle (opcional)

Design

Paleta de cores similar ao Musium

Layout responsivo

Anima√ß√µes suaves

Footer com RM e nome

üõ†Ô∏è Implementa√ß√£o Base
javascript
Copy
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { Audio } from 'expo-av';

const MusicPlayer = () => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [totalDuration, setTotalDuration] = useState(0);
  const [sound, setSound] = useState(null);

  // Lista de m√∫sicas de exemplo
  const tracks = [
    {
      id: 1,
      title: 'Bohemian Rhapsody',
      artist: 'Queen',
      artwork: 'https://example.com/cover1.jpg',
      url: require('./assets/musics/song1.mp3'),
    },
    // Adicione mais m√∫sicas
  ];

  const [currentTrack, setCurrentTrack] = useState(0);

  useEffect(() => {
    (async () => {
      const { sound } = await Audio.Sound.createAsync(
        tracks[currentTrack].url,
        { shouldPlay: false }
      );
      setSound(sound);
    })();

    return () => {
      if (sound) {
        sound.unloadAsync();
      }
    };
  }, [currentTrack]);

  const togglePlayback = async () => {
    if (!sound) return;

    if (isPlaying) {
      await sound.pauseAsync();
    } else {
      await sound.playAsync();
    }
    setIsPlaying(!isPlaying);
  };

  const skipToNext = () => {
    setCurrentTrack((prev) => (prev + 1) % tracks.length);
  };

  const skipToPrevious = () => {
    setCurrentTrack((prev) => (prev - 1 + tracks.length) % tracks.length);
  };

  return (
    <View style={styles.container}>
      {/* √Årea do √Ålbum */}
      <Image 
        source={{ uri: tracks[currentTrack].artwork }} 
        style={styles.albumArt}
      />

      {/* Informa√ß√µes da M√∫sica */}
      <View style={styles.trackInfo}>
        <Text style={styles.title}>{tracks[currentTrack].title}</Text>
        <Text style={styles.artist}>{tracks[currentTrack].artist}</Text>
      </View>

      {/* Barra de Progresso */}
      <View style={styles.progressContainer}>
        <Text style={styles.timeText}>
          {new Date(currentTime * 1000).toISOString().substr(14, 5)}
        </Text>
        <View style={styles.progressBar}>
          <View style={[styles.progress, { width: `${(currentTime / totalDuration) * 100}%` }]} />
        </View>
        <Text style={styles.timeText}>
          {new Date(totalDuration * 1000).toISOString().substr(14, 5)}
        </Text>
      </View>

      {/* Controles */}
      <View style={styles.controls}>
        <TouchableOpacity onPress={skipToPrevious}>
          <Ionicons name="play-skip-back" size={32} color="#fff" />
        </TouchableOpacity>

        <TouchableOpacity onPress={togglePlayback} style={styles.playButton}>
          <Ionicons 
            name={isPlaying ? "pause" : "play"} 
            size={48} 
            color="#fff" 
          />
        </TouchableOpacity>

        <TouchableOpacity onPress={skipToNext}>
          <Ionicons name="play-skip-forward" size={32} color="#fff" />
        </TouchableOpacity>
      </View>

      {/* Footer */}
      <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
    </View>
  );
};

// Estilos baseados no Musium UI
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    padding: 20,
  },
  albumArt: {
    width: 300,
    height: 300,
    borderRadius: 20,
    marginVertical: 30,
  },
  trackInfo: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  artist: {
    color: '#888',
    fontSize: 18,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
    marginBottom: 30,
  },
  progressBar: {
    flex: 1,
    height: 3,
    backgroundColor: '#444',
    marginHorizontal: 10,
  },
  progress: {
    height: '100%',
    backgroundColor: '#1DB954',
  },
  controls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '80%',
  },
  playButton: {
    backgroundColor: '#1DB954',
    padding: 20,
    borderRadius: 50,
  },
  footer: {
    position: 'absolute',
    bottom: 20,
    color: '#888',
    fontSize: 12,
  },
});

export default MusicPlayer;
üîß Depend√™ncias Necess√°rias
bash
Copy
expo install expo-av react-native-vector-icons
üé® Paleta de Cores Sugerida (Musium Style)
Fundo: #1a1a1a

Texto Prim√°rio: #ffffff

Texto Secund√°rio: #888888

Bot√£o Play: #1DB954

Barra de Progresso: #444444

üí° Melhorias Poss√≠veis
Implementar gestos para:

Arrastar a barra de progresso

Swipe para trocar de faixa

Adicionar anima√ß√µes com react-native-reanimated

Sistema de playlist

Modo offline com armazenamento local

Equalizador visual

Controle por notifica√ß√£o do sistema

‚ö†Ô∏è Pontos de Aten√ß√£o
N√£o esque√ßa de substituir:

URLs das capas dos √°lbuns

Arquivos de √°udio locais

RM e nome no footer

Teste em ambos os sistemas (Android/iOS)

Cuide do ciclo de vida do √°udio (pause ao fechar app)

Precisa de ajuda com alguma funcionalidade espec√≠fica ou ajustes no layout? üòä

como que eu come√ßo? faca um passo a passo
Vamos come√ßar do zero! Aqui est√° um passo a passo detalhado para criar o projeto do Music Player em React Native:

üõ†Ô∏è Passo 1: Configura√ß√£o do Ambiente
Instale o Node.js:

Baixe e instale o Node.js em nodejs.org.

Instale o Expo CLI:

Abra o terminal e execute:

bash
Copy
npm install -g expo-cli
Verifique a instala√ß√£o:

Execute:

bash
Copy
expo --version
Se aparecer a vers√£o, est√° tudo certo!

üöÄ Passo 2: Criar o Projeto
Crie um novo projeto:

No terminal, execute:

bash
Copy
expo init MusicPlayerApp
Escolha o template "blank" (√© o mais simples para come√ßar).

Navegue at√© a pasta do projeto:

bash
Copy
cd MusicPlayerApp
Instale as depend√™ncias necess√°rias:

Execute:

bash
Copy
expo install expo-av react-native-vector-icons
O expo-av √© para reprodu√ß√£o de √°udio, e o react-native-vector-icons √© para os √≠cones dos controles.

üìÇ Passo 3: Estrutura do Projeto
Crie uma estrutura de pastas:

Dentro da pasta MusicPlayerApp, organize assim:

Copy
MusicPlayerApp/
‚îú‚îÄ‚îÄ assets/
‚îÇ   ‚îú‚îÄ‚îÄ musics/          # Coloque seus arquivos de √°udio aqui
‚îÇ   ‚îî‚îÄ‚îÄ images/          # Imagens (como capas de √°lbum)
‚îú‚îÄ‚îÄ components/          # Componentes reutiliz√°veis
‚îú‚îÄ‚îÄ screens/             # Telas da aplica√ß√£o
‚îî‚îÄ‚îÄ App.js               # Ponto de entrada
Adicione arquivos de √°udio e imagens:

Coloque suas m√∫sicas na pasta assets/musics/.

Coloque as capas dos √°lbuns na pasta assets/images/.

üé® Passo 4: Implementar o Player
Abra o arquivo App.js:

Substitua o conte√∫do pelo c√≥digo do Music Player que forneci anteriormente.

Atualize as informa√ß√µes das m√∫sicas:

No array tracks, substitua os dados pelas suas m√∫sicas:

javascript
Copy
const tracks = [
  {
    id: 1,
    title: 'Nome da M√∫sica',
    artist: 'Nome do Artista',
    artwork: require('./assets/images/cover1.jpg'), // Caminho da imagem
    url: require('./assets/musics/song1.mp3'),      // Caminho do √°udio
  },
  // Adicione mais m√∫sicas
];
Atualize o footer:

No final do arquivo App.js, substitua o texto do footer pelo seu RM e nome:

javascript
Copy
<Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
‚ñ∂Ô∏è Passo 5: Executar o Projeto
Inicie o servidor de desenvolvimento:

No terminal, execute:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

üéØ Passo 6: Testar e Ajustar
Teste as funcionalidades:

Verifique se o play/pause funciona.

Teste a troca de faixas.

Confira se o tempo da m√∫sica est√° sendo atualizado.

Ajuste o layout:

Personalize as cores, fontes e espa√ßamentos no arquivo styles.

Adicione anima√ß√µes (opcional):

Use a biblioteca react-native-reanimated para animar a capa do √°lbum ou a barra de progresso.

üì¶ Passo 7: Pr√≥ximos Passos
Adicionar mais funcionalidades:

Implementar gestos para controle.

Adicionar uma lista de m√∫sicas.

Criar um sistema de playlists.

Publicar o app:

Siga o guia do Expo para publicar na Play Store e App Store.

üö® Dicas Importantes
Teste em dispositivos reais: Sempre teste no seu celular para garantir que tudo funciona como esperado.

Organize o c√≥digo: Divida o c√≥digo em componentes reutiliz√°veis para facilitar a manuten√ß√£o.

Documente o projeto: Adicione coment√°rios no c√≥digo para explicar o que cada parte faz.

Pronto! Agora voc√™ tem um player de m√∫sica funcional em React Native. üéâ
Se precisar de ajuda em alguma etapa ou quiser implementar algo espec√≠fico, √© s√≥ perguntar! üòä

n precisa ter o audio so a pagina estatica
Ah, entendi! Se o objetivo √© criar apenas uma p√°gina est√°tica do Music Player, sem a funcionalidade de reprodu√ß√£o de √°udio, podemos simplificar bastante o projeto. Vou te guiar passo a passo para criar uma interface est√°tica, focando no layout e no design.

üõ†Ô∏è Passo 1: Configura√ß√£o do Projeto
Crie um novo projeto com Expo:

No terminal, execute:

bash
Copy
expo init MusicPlayerStatic
Escolha o template "blank".

Navegue at√© a pasta do projeto:

bash
Copy
cd MusicPlayerStatic
Instale as depend√™ncias necess√°rias:

Vamos usar o react-native-vector-icons para os √≠cones dos controles:

bash
Copy
expo install react-native-vector-icons
üé® Passo 2: Estrutura do Projeto
Crie uma estrutura de pastas:

Dentro da pasta MusicPlayerStatic, organize assim:

Copy
MusicPlayerStatic/
‚îú‚îÄ‚îÄ assets/
‚îÇ   ‚îî‚îÄ‚îÄ images/          # Coloque as imagens (capa do √°lbum)
‚îú‚îÄ‚îÄ components/          # Componentes reutiliz√°veis
‚îú‚îÄ‚îÄ screens/             # Telas da aplica√ß√£o
‚îî‚îÄ‚îÄ App.js               # Ponto de entrada
Adicione a capa do √°lbum:

Coloque uma imagem de capa de √°lbum na pasta assets/images/. Por exemplo, cover1.jpg.

üìÑ Passo 3: Implementar a P√°gina Est√°tica
Abra o arquivo App.js:

Substitua o conte√∫do pelo c√≥digo abaixo:

javascript
Copy
import React from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';

const MusicPlayerStatic = () => {
  return (
    <View style={styles.container}>
      {/* Capa do √Ålbum */}
      <Image 
        source={require('./assets/images/cover1.jpg')} 
        style={styles.albumArt}
      />

      {/* Informa√ß√µes da M√∫sica */}
      <View style={styles.trackInfo}>
        <Text style={styles.title}>Bohemian Rhapsody</Text>
        <Text style={styles.artist}>Queen</Text>
      </View>

      {/* Barra de Progresso (Est√°tica) */}
      <View style={styles.progressContainer}>
        <Text style={styles.timeText}>2:30</Text>
        <View style={styles.progressBar}>
          <View style={styles.progress} />
        </View>
        <Text style={styles.timeText}>4:15</Text>
      </View>

      {/* Controles (Est√°ticos) */}
      <View style={styles.controls}>
        <TouchableOpacity>
          <Ionicons name="play-skip-back" size={32} color="#fff" />
        </TouchableOpacity>

        <TouchableOpacity style={styles.playButton}>
          <Ionicons name="play" size={48} color="#fff" />
        </TouchableOpacity>

        <TouchableOpacity>
          <Ionicons name="play-skip-forward" size={32} color="#fff" />
        </TouchableOpacity>
      </View>

      {/* Footer */}
      <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
    </View>
  );
};

// Estilos
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  albumArt: {
    width: 300,
    height: 300,
    borderRadius: 20,
    marginBottom: 30,
  },
  trackInfo: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  artist: {
    color: '#888',
    fontSize: 18,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
    marginBottom: 30,
  },
  progressBar: {
    flex: 1,
    height: 3,
    backgroundColor: '#444',
    marginHorizontal: 10,
  },
  progress: {
    width: '50%', // Progresso est√°tico (50%)
    height: '100%',
    backgroundColor: '#1DB954',
  },
  timeText: {
    color: '#888',
    fontSize: 14,
  },
  controls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '80%',
  },
  playButton: {
    backgroundColor: '#1DB954',
    padding: 20,
    borderRadius: 50,
  },
  footer: {
    position: 'absolute',
    bottom: 20,
    color: '#888',
    fontSize: 12,
  },
});

export default MusicPlayerStatic;
üéØ Passo 4: Personaliza√ß√£o
Altere as informa√ß√µes da m√∫sica:

No c√≥digo acima, substitua:

Bohemian Rhapsody pelo nome da m√∫sica.

Queen pelo nome do artista.

require('./assets/images/cover1.jpg') pelo caminho da sua imagem.

Atualize o footer:

No final do arquivo App.js, substitua o texto do footer pelo seu RM e nome:

javascript
Copy
<Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
‚ñ∂Ô∏è Passo 5: Executar o Projeto
Inicie o servidor de desenvolvimento:

No terminal, execute:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

üñºÔ∏è Resultado Esperado
Voc√™ ver√° uma interface est√°tica do Music Player com:

Capa do √°lbum.

Nome da m√∫sica e artista.

Barra de progresso est√°tica.

Controles de play, pr√≥ximo e anterior.

Footer com seu RM e nome.

üöÄ Pr√≥ximos Passos (Opcional)
Se quiser evoluir o projeto, voc√™ pode:

Adicionar anima√ß√µes com react-native-reanimated.

Criar uma lista de m√∫sicas est√°ticas.

Implementar gestos para intera√ß√£o (como arrastar a barra de progresso).

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

√© tsx
Ah, entendi! Voc√™ quer a vers√£o do c√≥digo em TypeScript (TSX). Vou adaptar o projeto est√°tico do Music Player para TypeScript. Vamos l√°!

üõ†Ô∏è Passo 1: Configura√ß√£o do Projeto com TypeScript
Crie um novo projeto com Expo e TypeScript:

No terminal, execute:

bash
Copy
expo init MusicPlayerTSX
Escolha o template "blank (TypeScript)".

Navegue at√© a pasta do projeto:

bash
Copy
cd MusicPlayerTSX
Instale as depend√™ncias necess√°rias:

Vamos usar o react-native-vector-icons para os √≠cones dos controles:

bash
Copy
expo install react-native-vector-icons
üé® Passo 2: Estrutura do Projeto
Crie uma estrutura de pastas:

Dentro da pasta MusicPlayerTSX, organize assim:

Copy
MusicPlayerTSX/
‚îú‚îÄ‚îÄ assets/
‚îÇ   ‚îî‚îÄ‚îÄ images/          # Coloque as imagens (capa do √°lbum)
‚îú‚îÄ‚îÄ components/          # Componentes reutiliz√°veis
‚îú‚îÄ‚îÄ screens/             # Telas da aplica√ß√£o
‚îî‚îÄ‚îÄ App.tsx              # Ponto de entrada (agora √© .tsx)
Adicione a capa do √°lbum:

Coloque uma imagem de capa de √°lbum na pasta assets/images/. Por exemplo, cover1.jpg.

üìÑ Passo 3: Implementar a P√°gina Est√°tica em TSX
Abra o arquivo App.tsx:

Substitua o conte√∫do pelo c√≥digo abaixo:

tsx
Copy
import React from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';

const MusicPlayerStatic: React.FC = () => {
  return (
    <View style={styles.container}>
      {/* Capa do √Ålbum */}
      <Image 
        source={require('./assets/images/cover1.jpg')} 
        style={styles.albumArt}
      />

      {/* Informa√ß√µes da M√∫sica */}
      <View style={styles.trackInfo}>
        <Text style={styles.title}>Bohemian Rhapsody</Text>
        <Text style={styles.artist}>Queen</Text>
      </View>

      {/* Barra de Progresso (Est√°tica) */}
      <View style={styles.progressContainer}>
        <Text style={styles.timeText}>2:30</Text>
        <View style={styles.progressBar}>
          <View style={styles.progress} />
        </View>
        <Text style={styles.timeText}>4:15</Text>
      </View>

      {/* Controles (Est√°ticos) */}
      <View style={styles.controls}>
        <TouchableOpacity>
          <Ionicons name="play-skip-back" size={32} color="#fff" />
        </TouchableOpacity>

        <TouchableOpacity style={styles.playButton}>
          <Ionicons name="play" size={48} color="#fff" />
        </TouchableOpacity>

        <TouchableOpacity>
          <Ionicons name="play-skip-forward" size={32} color="#fff" />
        </TouchableOpacity>
      </View>

      {/* Footer */}
      <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
    </View>
  );
};

// Estilos
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  albumArt: {
    width: 300,
    height: 300,
    borderRadius: 20,
    marginBottom: 30,
  },
  trackInfo: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  artist: {
    color: '#888',
    fontSize: 18,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
    marginBottom: 30,
  },
  progressBar: {
    flex: 1,
    height: 3,
    backgroundColor: '#444',
    marginHorizontal: 10,
  },
  progress: {
    width: '50%', // Progresso est√°tico (50%)
    height: '100%',
    backgroundColor: '#1DB954',
  },
  timeText: {
    color: '#888',
    fontSize: 14,
  },
  controls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '80%',
  },
  playButton: {
    backgroundColor: '#1DB954',
    padding: 20,
    borderRadius: 50,
  },
  footer: {
    position: 'absolute',
    bottom: 20,
    color: '#888',
    fontSize: 12,
  },
});

export default MusicPlayerStatic;
üéØ Passo 4: Personaliza√ß√£o
Altere as informa√ß√µes da m√∫sica:

No c√≥digo acima, substitua:

Bohemian Rhapsody pelo nome da m√∫sica.

Queen pelo nome do artista.

require('./assets/images/cover1.jpg') pelo caminho da sua imagem.

Atualize o footer:

No final do arquivo App.tsx, substitua o texto do footer pelo seu RM e nome:

tsx
Copy
<Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
‚ñ∂Ô∏è Passo 5: Executar o Projeto
Inicie o servidor de desenvolvimento:

No terminal, execute:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

üñºÔ∏è Resultado Esperado
Voc√™ ver√° uma interface est√°tica do Music Player com:

Capa do √°lbum.

Nome da m√∫sica e artista.

Barra de progresso est√°tica.

Controles de play, pr√≥ximo e anterior.

Footer com seu RM e nome.

üöÄ Pr√≥ximos Passos (Opcional)
Se quiser evoluir o projeto, voc√™ pode:

Adicionar anima√ß√µes com react-native-reanimated.

Criar uma lista de m√∫sicas est√°ticas.

Implementar gestos para intera√ß√£o (como arrastar a barra de progresso).

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

quero Implementar gestos para intera√ß√£o (como arrastar a barra de progresso),  e colocar mais musicas para o lado
Vamos implementar gestos para arrastar a barra de progresso e adicionar uma lista de m√∫sicas lateral que pode ser rolada horizontalmente. Para isso, usaremos a biblioteca react-native-gesture-handler para os gestos e um ScrollView horizontal para a lista de m√∫sicas.

üõ†Ô∏è Passo 1: Instalar Depend√™ncias
Instale as bibliotecas necess√°rias:

No terminal, execute:

bash
Copy
expo install react-native-gesture-handler react-native-reanimated
Essas bibliotecas s√£o essenciais para gestos e anima√ß√µes.

Configure o react-native-gesture-handler:

No topo do arquivo App.tsx, adicione:

tsx
Copy
import 'react-native-gesture-handler';
üéØ Passo 2: Implementar Gestos na Barra de Progresso
Vamos usar o PanGestureHandler do react-native-gesture-handler para permitir que o usu√°rio arraste a barra de progresso.

Atualize o c√≥digo da barra de progresso:

Substitua a barra de progresso est√°tica por uma vers√£o interativa.

tsx
Copy
import React, { useState } from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity, ScrollView } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { PanGestureHandler, State } from 'react-native-gesture-handler';
import Animated, { useSharedValue, useAnimatedStyle, withSpring } from 'react-native-reanimated';

const MusicPlayerStatic: React.FC = () => {
  const [progress, setProgress] = useState(0.5); // Progresso inicial (50%)
  const progressWidth = useSharedValue(150); // Largura inicial da barra de progresso

  const onGestureEvent = (event: any) => {
    if (event.nativeEvent.state === State.ACTIVE) {
      const newWidth = Math.max(0, Math.min(300, event.nativeEvent.translationX + 150)); // Limita o valor entre 0 e 300
      progressWidth.value = newWidth;
      setProgress(newWidth / 300); // Atualiza o progresso (0 a 1)
    }
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: withSpring(progressWidth.value, { damping: 10, stiffness: 100 }), // Anima√ß√£o suave
    };
  });

  return (
    <View style={styles.container}>
      {/* Capa do √Ålbum */}
      <Image 
        source={require('./assets/images/cover1.jpg')} 
        style={styles.albumArt}
      />

      {/* Informa√ß√µes da M√∫sica */}
      <View style={styles.trackInfo}>
        <Text style={styles.title}>Bohemian Rhapsody</Text>
        <Text style={styles.artist}>Queen</Text>
      </View>

      {/* Barra de Progresso Interativa */}
      <View style={styles.progressContainer}>
        <Text style={styles.timeText}>2:30</Text>
        <View style={styles.progressBar}>
          <PanGestureHandler onGestureEvent={onGestureEvent}>
            <Animated.View style={[styles.progress, progressStyle]} />
          </PanGestureHandler>
        </View>
        <Text style={styles.timeText}>4:15</Text>
      </View>

      {/* Controles (Est√°ticos) */}
      <View style={styles.controls}>
        <TouchableOpacity>
          <Ionicons name="play-skip-back" size={32} color="#fff" />
        </TouchableOpacity>

        <TouchableOpacity style={styles.playButton}>
          <Ionicons name="play" size={48} color="#fff" />
        </TouchableOpacity>

        <TouchableOpacity>
          <Ionicons name="play-skip-forward" size={32} color="#fff" />
        </TouchableOpacity>
      </View>

      {/* Lista de M√∫sicas */}
      <ScrollView horizontal style={styles.musicList}>
        {[1, 2, 3, 4, 5].map((item) => (
          <TouchableOpacity key={item} style={styles.musicItem}>
            <Image 
              source={require('./assets/images/cover1.jpg')} 
              style={styles.musicThumbnail}
            />
            <Text style={styles.musicTitle}>M√∫sica {item}</Text>
          </TouchableOpacity>
        ))}
      </ScrollView>

      {/* Footer */}
      <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
    </View>
  );
};

// Estilos
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  albumArt: {
    width: 300,
    height: 300,
    borderRadius: 20,
    marginBottom: 30,
  },
  trackInfo: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  artist: {
    color: '#888',
    fontSize: 18,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
    marginBottom: 30,
  },
  progressBar: {
    flex: 1,
    height: 3,
    backgroundColor: '#444',
    marginHorizontal: 10,
  },
  progress: {
    height: '100%',
    backgroundColor: '#1DB954',
  },
  timeText: {
    color: '#888',
    fontSize: 14,
  },
  controls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '80%',
  },
  playButton: {
    backgroundColor: '#1DB954',
    padding: 20,
    borderRadius: 50,
  },
  footer: {
    position: 'absolute',
    bottom: 20,
    color: '#888',
    fontSize: 12,
  },
  musicList: {
    position: 'absolute',
    bottom: 80,
    height: 100,
  },
  musicItem: {
    alignItems: 'center',
    marginHorizontal: 10,
  },
  musicThumbnail: {
    width: 80,
    height: 80,
    borderRadius: 10,
  },
  musicTitle: {
    color: '#fff',
    fontSize: 14,
    marginTop: 5,
  },
});

export default MusicPlayerStatic;
üéØ Passo 3: Explica√ß√£o das Novas Funcionalidades
Barra de Progresso Interativa:

Usamos o PanGestureHandler para detectar gestos de arrastar.

O Animated.View anima a largura da barra de progresso com base no gesto do usu√°rio.

O valor do progresso √© atualizado em tempo real.

Lista de M√∫sicas Lateral:

Usamos um ScrollView horizontal para exibir uma lista de m√∫sicas.

Cada item da lista cont√©m uma thumbnail e o nome da m√∫sica.

A lista pode ser rolada horizontalmente.

‚ñ∂Ô∏è Passo 4: Executar o Projeto
Inicie o servidor de desenvolvimento:

No terminal, execute:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

üñºÔ∏è Resultado Esperado
A barra de progresso agora pode ser arrastada para ajustar o tempo da m√∫sica.

A lista de m√∫sicas aparece na parte inferior e pode ser rolada horizontalmente.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar funcionalidade de troca de m√∫sica:

Ao clicar em um item da lista, troque a m√∫sica atual.

Melhorar as anima√ß√µes:

Use react-native-reanimated para anima√ß√µes mais complexas.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

(NOBRIDGE) ERROR  Warning: Error: PanGestureHandler must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.

This error is located at:
    in PanGestureHandler (created by MusicPlayerStatic)
    in RCTView (created by View)
    in View (created by MusicPlayerStatic)
    in RCTView (created by View)
    in View (created by MusicPlayerStatic)
    in RCTView (created by View)
    in View (created by MusicPlayerStatic)
    in MusicPlayerStatic (created by withDevTools(MusicPlayerStatic))
    in withDevTools(MusicPlayerStatic)
    in RCTView (created by View)
    in View (created by AppContainer)
    in RCTView (created by View)
    in View (created by AppContainer)
    in AppContainer
    in main(RootComponent)
 (NOBRIDGE) ERROR  Warning: Error: PanGestureHandler must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.

This error is located at:
    in PanGestureHandler (created by MusicPlayerStatic)
    in RCTView (created by View)
    in View (created by MusicPlayerStatic)
    in RCTView (created by View)
    in View (created by MusicPlayerStatic)
    in RCTView (created by View)
    in View (created by MusicPlayerStatic)
    in MusicPlayerStatic (created by withDevTools(MusicPlayerStatic))
    in withDevTools(MusicPlayerStatic)
    in RCTView (created by View)
    in View (created by AppContainer)
    in RCTView (created by View)
    in View (created by AppContainer)
    in AppContainer
    in main(RootComponent)
Esse erro ocorre porque o PanGestureHandler precisa estar dentro de um GestureHandlerRootView para funcionar corretamente. Vamos corrigir isso!

üõ†Ô∏è Passo 1: Adicionar o GestureHandlerRootView
Importe o GestureHandlerRootView:

No topo do arquivo App.tsx, adicione:

tsx
Copy
import { GestureHandlerRootView } from 'react-native-gesture-handler';
Envolva o conte√∫do do aplicativo com GestureHandlerRootView:

Substitua o View principal do seu componente por GestureHandlerRootView.

Aqui est√° o c√≥digo atualizado:

tsx
Copy
import React, { useState } from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity, ScrollView } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { PanGestureHandler, State, GestureHandlerRootView } from 'react-native-gesture-handler';
import Animated, { useSharedValue, useAnimatedStyle, withSpring } from 'react-native-reanimated';

const MusicPlayerStatic: React.FC = () => {
  const [progress, setProgress] = useState(0.5); // Progresso inicial (50%)
  const progressWidth = useSharedValue(150); // Largura inicial da barra de progresso

  const onGestureEvent = (event: any) => {
    if (event.nativeEvent.state === State.ACTIVE) {
      const newWidth = Math.max(0, Math.min(300, event.nativeEvent.translationX + 150)); // Limita o valor entre 0 e 300
      progressWidth.value = newWidth;
      setProgress(newWidth / 300); // Atualiza o progresso (0 a 1)
    }
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: withSpring(progressWidth.value, { damping: 10, stiffness: 100 }), // Anima√ß√£o suave
    };
  });

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <View style={styles.container}>
        {/* Capa do √Ålbum */}
        <Image 
          source={require('./assets/images/cover1.jpg')} 
          style={styles.albumArt}
        />

        {/* Informa√ß√µes da M√∫sica */}
        <View style={styles.trackInfo}>
          <Text style={styles.title}>Bohemian Rhapsody</Text>
          <Text style={styles.artist}>Queen</Text>
        </View>

        {/* Barra de Progresso Interativa */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>2:30</Text>
          <View style={styles.progressBar}>
            <PanGestureHandler onGestureEvent={onGestureEvent}>
              <Animated.View style={[styles.progress, progressStyle]} />
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>4:15</Text>
        </View>

        {/* Controles (Est√°ticos) */}
        <View style={styles.controls}>
          <TouchableOpacity>
            <Ionicons name="play-skip-back" size={32} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.playButton}>
            <Ionicons name="play" size={48} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity>
            <Ionicons name="play-skip-forward" size={32} color="#fff" />
          </TouchableOpacity>
        </View>

        {/* Lista de M√∫sicas */}
        <ScrollView horizontal style={styles.musicList}>
          {[1, 2, 3, 4, 5].map((item) => (
            <TouchableOpacity key={item} style={styles.musicItem}>
              <Image 
                source={require('./assets/images/cover1.jpg')} 
                style={styles.musicThumbnail}
              />
              <Text style={styles.musicTitle}>M√∫sica {item}</Text>
            </TouchableOpacity>
          ))}
        </ScrollView>

        {/* Footer */}
        <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
      </View>
    </GestureHandlerRootView>
  );
};

// Estilos
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  albumArt: {
    width: 300,
    height: 300,
    borderRadius: 20,
    marginBottom: 30,
  },
  trackInfo: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  artist: {
    color: '#888',
    fontSize: 18,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
    marginBottom: 30,
  },
  progressBar: {
    flex: 1,
    height: 3,
    backgroundColor: '#444',
    marginHorizontal: 10,
  },
  progress: {
    height: '100%',
    backgroundColor: '#1DB954',
  },
  timeText: {
    color: '#888',
    fontSize: 14,
  },
  controls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '80%',
  },
  playButton: {
    backgroundColor: '#1DB954',
    padding: 20,
    borderRadius: 50,
  },
  footer: {
    position: 'absolute',
    bottom: 20,
    color: '#888',
    fontSize: 12,
  },
  musicList: {
    position: 'absolute',
    bottom: 80,
    height: 100,
  },
  musicItem: {
    alignItems: 'center',
    marginHorizontal: 10,
  },
  musicThumbnail: {
    width: 80,
    height: 80,
    borderRadius: 10,
  },
  musicTitle: {
    color: '#fff',
    fontSize: 14,
    marginTop: 5,
  },
});

export default MusicPlayerStatic;
üéØ Passo 2: O que mudou?
GestureHandlerRootView:

Envolve todo o conte√∫do do aplicativo.

Garante que os gestos funcionem corretamente.

Corre√ß√£o do erro:

O PanGestureHandler agora est√° dentro de um GestureHandlerRootView, o que resolve o erro.

‚ñ∂Ô∏è Passo 3: Testar o Projeto
Inicie o servidor de desenvolvimento:

No terminal, execute:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

üñºÔ∏è Resultado Esperado
A barra de progresso agora pode ser arrastada sem erros.

A lista de m√∫sicas aparece na parte inferior e pode ser rolada horizontalmente.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar funcionalidade de troca de m√∫sica:

Ao clicar em um item da lista, troque a m√∫sica atual.

Melhorar as anima√ß√µes:

Use react-native-reanimated para anima√ß√µes mais complexas.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

n quero isso embaixo de varias imagens fa√ßa estilo sportify de trocar a musica troca a capa sem isso embaixo
Entendi! Voc√™ quer um layout mais parecido com o Spotify, onde a troca de m√∫sica atualiza a capa do √°lbum e as informa√ß√µes da m√∫sica, sem a lista de m√∫sicas embaixo. Vou te ajudar a criar isso.

Vamos focar em:

Trocar a m√∫sica manualmente (pr√≥xima/anterior).

Atualizar a capa do √°lbum e as informa√ß√µes conforme a m√∫sica muda.

Remover a lista de m√∫sicas embaixo.

üõ†Ô∏è Passo 1: Estrutura do Projeto
Crie um array de m√∫sicas:

Cada m√∫sica ter√°:

T√≠tulo

Artista

Capa do √°lbum

Arquivo de √°udio (opcional, j√° que voc√™ quer algo est√°tico).

Use estados para controlar a m√∫sica atual:

Um estado (currentTrackIndex) para rastrear a m√∫sica que est√° tocando.

üéØ Passo 2: Implementar o Player Est√°tico
Aqui est√° o c√≥digo atualizado:

tsx
Copy
import React, { useState } from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { GestureHandlerRootView } from 'react-native-gesture-handler';

// Lista de m√∫sicas
const tracks = [
  {
    id: 1,
    title: 'Bohemian Rhapsody',
    artist: 'Queen',
    artwork: require('./assets/images/cover1.jpg'),
  },
  {
    id: 2,
    title: 'Shape of You',
    artist: 'Ed Sheeran',
    artwork: require('./assets/images/cover2.jpg'),
  },
  {
    id: 3,
    title: 'Blinding Lights',
    artist: 'The Weeknd',
    artwork: require('./assets/images/cover3.jpg'),
  },
  // Adicione mais m√∫sicas aqui
];

const MusicPlayerStatic: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);

  const currentTrack = tracks[currentTrackIndex];

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
  };

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <View style={styles.container}>
        {/* Capa do √Ålbum */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Informa√ß√µes da M√∫sica */}
        <View style={styles.trackInfo}>
          <Text style={styles.title}>{currentTrack.title}</Text>
          <Text style={styles.artist}>{currentTrack.artist}</Text>
        </View>

        {/* Controles */}
        <View style={styles.controls}>
          <TouchableOpacity onPress={handlePrevious}>
            <Ionicons name="play-skip-back" size={32} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.playButton}>
            <Ionicons name="play" size={48} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity onPress={handleNext}>
            <Ionicons name="play-skip-forward" size={32} color="#fff" />
          </TouchableOpacity>
        </View>

        {/* Footer */}
        <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
      </View>
    </GestureHandlerRootView>
  );
};

// Estilos
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  albumArt: {
    width: 300,
    height: 300,
    borderRadius: 20,
    marginBottom: 30,
  },
  trackInfo: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  artist: {
    color: '#888',
    fontSize: 18,
  },
  controls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '80%',
  },
  playButton: {
    backgroundColor: '#1DB954',
    padding: 20,
    borderRadius: 50,
  },
  footer: {
    position: 'absolute',
    bottom: 20,
    color: '#888',
    fontSize: 12,
  },
});

export default MusicPlayerStatic;
üéØ Passo 3: Explica√ß√£o do C√≥digo
Lista de M√∫sicas:

O array tracks cont√©m as informa√ß√µes de cada m√∫sica (t√≠tulo, artista e capa do √°lbum).

Estado currentTrackIndex:

Controla qual m√∫sica est√° sendo exibida no momento.

Fun√ß√µes handleNext e handlePrevious:

Atualizam o √≠ndice da m√∫sica atual para a pr√≥xima ou anterior.

Atualiza√ß√£o Din√¢mica:

A capa do √°lbum e as informa√ß√µes da m√∫sica s√£o atualizadas automaticamente quando o √≠ndice muda.

‚ñ∂Ô∏è Passo 4: Executar o Projeto
Inicie o servidor de desenvolvimento:

No terminal, execute:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

üñºÔ∏è Resultado Esperado
A capa do √°lbum e as informa√ß√µes da m√∫sica s√£o atualizadas ao trocar de m√∫sica.

Os bot√µes de pr√≥ximo e anterior funcionam corretamente.

Layout limpo e focado, sem a lista de m√∫sicas embaixo.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar anima√ß√µes:

Use react-native-reanimated para animar a transi√ß√£o entre as capas dos √°lbuns.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Adicionar funcionalidade de play/pause:

Se quiser tornar o player funcional, integre o expo-av para reprodu√ß√£o de √°udio.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

import { Ionicons } from '@expo/vector-icons';
import React, { useState } from 'react';
import { Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { GestureHandlerRootView } from 'react-native-gesture-handler';

// Lista de m√∫sicas
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL,Babidi ',
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MC s',
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
  // Adicione mais m√∫sicas aqui
];

const MusicPlayerStatic: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);

  const currentTrack = tracks[currentTrackIndex];

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
  };

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <View style={styles.container}>
        {/* Capa do √Ålbum */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Informa√ß√µes da M√∫sica */}
        <View style={styles.trackInfo}>
          <Text style={styles.title}>{currentTrack.title}</Text>
          <Text style={styles.artist}>{currentTrack.artist}</Text>
        </View>

        {/* Controles */}
        <View style={styles.controls}>
          <TouchableOpacity onPress={handlePrevious}>
            <Ionicons name="play-skip-back" size={32} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.playButton}>
            <Ionicons name="play" size={48} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity onPress={handleNext}>
            <Ionicons name="play-skip-forward" size={32} color="#fff" />
          </TouchableOpacity>
        </View>

        {/* Footer */}
        <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
      </View>
    </GestureHandlerRootView>
  );
};

// Estilos
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  albumArt: {
    width: 300,
    height: 300,
    borderRadius: 20,
    marginBottom: 30,
  },
  trackInfo: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  artist: {
    color: '#888',
    fontSize: 18,
  },
  controls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '80%',
  },
  playButton: {
    backgroundColor: '#1DB954',
    padding: 20,
    borderRadius: 50,
  },
  footer: {
    position: 'absolute',
    bottom: 20,
    color: '#888',
    fontSize: 12,
  },
});

export default MusicPlayerStatic; coloque a barra embaixo pra eu mexer sabe os minutos da musica
Agora vamos adicionar uma barra de progresso interativa embaixo da m√∫sica, onde voc√™ pode arrastar para ajustar o tempo da m√∫sica. Para isso, usaremos o PanGestureHandler do react-native-gesture-handler e o react-native-reanimated para anima√ß√µes suaves.

üõ†Ô∏è Passo 1: Adicionar a Barra de Progresso Interativa
Importe as bibliotecas necess√°rias:

No topo do arquivo, adicione:

tsx
Copy
import { PanGestureHandler } from 'react-native-gesture-handler';
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withSpring,
} from 'react-native-reanimated';
Crie estados e vari√°veis para o progresso:

Adicione o seguinte c√≥digo dentro do componente MusicPlayerStatic:

tsx
Copy
const progressWidth = useSharedValue(0); // Largura inicial da barra de progresso
const [progress, setProgress] = useState(0); // Progresso atual (0 a 1)

const onGestureEvent = (event: any) => {
  if (event.nativeEvent.state === State.ACTIVE) {
    const newWidth = Math.max(0, Math.min(300, event.nativeEvent.translationX)); // Limita o valor entre 0 e 300
    progressWidth.value = newWidth;
    setProgress(newWidth / 300); // Atualiza o progresso (0 a 1)
  }
};

const progressStyle = useAnimatedStyle(() => {
  return {
    width: withSpring(progressWidth.value, { damping: 10, stiffness: 100 }), // Anima√ß√£o suave
  };
});
Adicione a barra de progresso ao layout:

Substitua o conte√∫do do View principal pelo seguinte:

tsx
Copy
<GestureHandlerRootView style={{ flex: 1 }}>
  <View style={styles.container}>
    {/* Capa do √Ålbum */}
    <Image source={currentTrack.artwork} style={styles.albumArt} />

    {/* Informa√ß√µes da M√∫sica */}
    <View style={styles.trackInfo}>
      <Text style={styles.title}>{currentTrack.title}</Text>
      <Text style={styles.artist}>{currentTrack.artist}</Text>
    </View>

    {/* Barra de Progresso Interativa */}
    <View style={styles.progressContainer}>
      <Text style={styles.timeText}>{formatTime(progress * 180)}</Text> {/* Tempo decorrido */}
      <View style={styles.progressBar}>
        <PanGestureHandler onGestureEvent={onGestureEvent}>
          <Animated.View style={[styles.progress, progressStyle]} />
        </PanGestureHandler>
      </View>
      <Text style={styles.timeText}>{formatTime(180)}</Text> {/* Tempo total */}
    </View>

    {/* Controles */}
    <View style={styles.controls}>
      <TouchableOpacity onPress={handlePrevious}>
        <Ionicons name="play-skip-back" size={32} color="#fff" />
      </TouchableOpacity>

      <TouchableOpacity style={styles.playButton}>
        <Ionicons name="play" size={48} color="#fff" />
      </TouchableOpacity>

      <TouchableOpacity onPress={handleNext}>
        <Ionicons name="play-skip-forward" size={32} color="#fff" />
      </TouchableOpacity>
    </View>

    {/* Footer */}
    <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
  </View>
</GestureHandlerRootView>
Adicione a fun√ß√£o formatTime:

Essa fun√ß√£o converte segundos em um formato MM:SS:

tsx
Copy
const formatTime = (seconds: number) => {
  const minutes = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
};
Atualize os estilos:

Adicione os estilos para a barra de progresso:

tsx
Copy
progressContainer: {
  flexDirection: 'row',
  alignItems: 'center',
  width: '100%',
  marginBottom: 30,
},
progressBar: {
  flex: 1,
  height: 3,
  backgroundColor: '#444',
  marginHorizontal: 10,
},
progress: {
  height: '100%',
  backgroundColor: '#1DB954',
},
timeText: {
  color: '#888',
  fontSize: 14,
},
üéØ Passo 2: Explica√ß√£o das Novas Funcionalidades
Barra de Progresso Interativa:

O PanGestureHandler detecta gestos de arrastar.

O Animated.View anima a largura da barra de progresso com base no gesto do usu√°rio.

O valor do progresso √© atualizado em tempo real.

Tempo Decorrido e Total:

O tempo total da m√∫sica √© fixo em 180 segundos (3 minutos).

O tempo decorrido √© calculado com base no progresso.

Formata√ß√£o do Tempo:

A fun√ß√£o formatTime converte segundos em um formato MM:SS.

‚ñ∂Ô∏è Passo 3: Executar o Projeto
Inicie o servidor de desenvolvimento:

No terminal, execute:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

üñºÔ∏è Resultado Esperado
A barra de progresso agora pode ser arrastada para ajustar o tempo da m√∫sica.

O tempo decorrido e total s√£o exibidos ao lado da barra.

A capa do √°lbum e as informa√ß√µes da m√∫sica s√£o atualizadas ao trocar de m√∫sica.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar funcionalidade de play/pause:

Integre o expo-av para reprodu√ß√£o de √°udio.

Melhorar as anima√ß√µes:

Use react-native-reanimated para anima√ß√µes mais complexas.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

mostre o codigo completo
Aqui est√° o c√≥digo completo com a barra de progresso interativa, a troca de m√∫sicas e o layout estilo Spotify:

tsx
Copy
import { Ionicons } from '@expo/vector-icons';
import React, { useState } from 'react';
import { Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler, State } from 'react-native-gesture-handler';
import Animated, { useSharedValue, useAnimatedStyle, withSpring } from 'react-native-reanimated';

// Lista de m√∫sicas
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
  // Adicione mais m√∫sicas aqui
];

const MusicPlayerStatic: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [progress, setProgress] = useState(0); // Progresso atual (0 a 1)
  const progressWidth = useSharedValue(0); // Largura inicial da barra de progresso

  const currentTrack = tracks[currentTrackIndex];

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setProgress(0); // Reseta o progresso ao trocar de m√∫sica
    progressWidth.value = 0; // Reseta a largura da barra de progresso
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setProgress(0); // Reseta o progresso ao trocar de m√∫sica
    progressWidth.value = 0; // Reseta a largura da barra de progresso
  };

  const onGestureEvent = (event: any) => {
    if (event.nativeEvent.state === State.ACTIVE) {
      const newWidth = Math.max(0, Math.min(300, event.nativeEvent.translationX)); // Limita o valor entre 0 e 300
      progressWidth.value = newWidth;
      setProgress(newWidth / 300); // Atualiza o progresso (0 a 1)
    }
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: withSpring(progressWidth.value, { damping: 10, stiffness: 100 }), // Anima√ß√£o suave
    };
  });

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
  };

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <View style={styles.container}>
        {/* Capa do √Ålbum */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Informa√ß√µes da M√∫sica */}
        <View style={styles.trackInfo}>
          <Text style={styles.title}>{currentTrack.title}</Text>
          <Text style={styles.artist}>{currentTrack.artist}</Text>
        </View>

        {/* Barra de Progresso Interativa */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(progress * 180)}</Text> {/* Tempo decorrido */}
          <View style={styles.progressBar}>
            <PanGestureHandler onGestureEvent={onGestureEvent}>
              <Animated.View style={[styles.progress, progressStyle]} />
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(180)}</Text> {/* Tempo total */}
        </View>

        {/* Controles */}
        <View style={styles.controls}>
          <TouchableOpacity onPress={handlePrevious}>
            <Ionicons name="play-skip-back" size={32} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.playButton}>
            <Ionicons name="play" size={48} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity onPress={handleNext}>
            <Ionicons name="play-skip-forward" size={32} color="#fff" />
          </TouchableOpacity>
        </View>

        {/* Footer */}
        <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
      </View>
    </GestureHandlerRootView>
  );
};

// Estilos
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  albumArt: {
    width: 300,
    height: 300,
    borderRadius: 20,
    marginBottom: 30,
  },
  trackInfo: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  artist: {
    color: '#888',
    fontSize: 18,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
    marginBottom: 30,
  },
  progressBar: {
    flex: 1,
    height: 3,
    backgroundColor: '#444',
    marginHorizontal: 10,
  },
  progress: {
    height: '100%',
    backgroundColor: '#1DB954',
  },
  timeText: {
    color: '#888',
    fontSize: 14,
  },
  controls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '80%',
  },
  playButton: {
    backgroundColor: '#1DB954',
    padding: 20,
    borderRadius: 50,
  },
  footer: {
    position: 'absolute',
    bottom: 20,
    color: '#888',
    fontSize: 12,
  },
});

export default MusicPlayerStatic;
üéØ O que foi adicionado?
Barra de Progresso Interativa:

Usamos o PanGestureHandler para detectar gestos de arrastar.

O Animated.View anima a largura da barra de progresso com base no gesto do usu√°rio.

O valor do progresso √© atualizado em tempo real.

Tempo Decorrido e Total:

O tempo total da m√∫sica √© fixo em 180 segundos (3 minutos).

O tempo decorrido √© calculado com base no progresso.

Formata√ß√£o do Tempo:

A fun√ß√£o formatTime converte segundos em um formato MM:SS.

‚ñ∂Ô∏è Como testar?
Inicie o servidor de desenvolvimento:

No terminal, execute:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

üñºÔ∏è Resultado Esperado
A barra de progresso pode ser arrastada para ajustar o tempo da m√∫sica.

O tempo decorrido e total s√£o exibidos ao lado da barra.

A capa do √°lbum e as informa√ß√µes da m√∫sica s√£o atualizadas ao trocar de m√∫sica.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar funcionalidade de play/pause:

Integre o expo-av para reprodu√ß√£o de √°udio.

Melhorar as anima√ß√µes:

Use react-native-reanimated para anima√ß√µes mais complexas.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

e o icone de gostei
Vamos adicionar um √≠cone de "gostei" (like) ao player de m√∫sica. Esse √≠cone permitir√° que o usu√°rio marque a m√∫sica atual como favorita. Vou te mostrar como implementar isso de forma simples e funcional.

üõ†Ô∏è Passo 1: Adicionar o √çcone de Gostei
Importe o √≠cone de cora√ß√£o:

J√° estamos usando o Ionicons, que tem um √≠cone de cora√ß√£o (heart e heart-outline).

Crie um estado para controlar se a m√∫sica foi curtida:

Use o useState para gerenciar o estado de "gostei".

Adicione o √≠cone ao layout:

Coloque o √≠cone de cora√ß√£o ao lado das informa√ß√µes da m√∫sica.

üéØ Passo 2: Implementar a Funcionalidade de Gostei
Aqui est√° o c√≥digo atualizado:

tsx
Copy
import { Ionicons } from '@expo/vector-icons';
import React, { useState } from 'react';
import { Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler, State } from 'react-native-gesture-handler';
import Animated, { useSharedValue, useAnimatedStyle, withSpring } from 'react-native-reanimated';

// Lista de m√∫sicas
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
  // Adicione mais m√∫sicas aqui
];

const MusicPlayerStatic: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [progress, setProgress] = useState(0); // Progresso atual (0 a 1)
  const [isLiked, setIsLiked] = useState(false); // Estado de "gostei"
  const progressWidth = useSharedValue(0); // Largura inicial da barra de progresso

  const currentTrack = tracks[currentTrackIndex];

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setProgress(0); // Reseta o progresso ao trocar de m√∫sica
    progressWidth.value = 0; // Reseta a largura da barra de progresso
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setProgress(0); // Reseta o progresso ao trocar de m√∫sica
    progressWidth.value = 0; // Reseta a largura da barra de progresso
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const onGestureEvent = (event: any) => {
    if (event.nativeEvent.state === State.ACTIVE) {
      const newWidth = Math.max(0, Math.min(300, event.nativeEvent.translationX)); // Limita o valor entre 0 e 300
      progressWidth.value = newWidth;
      setProgress(newWidth / 300); // Atualiza o progresso (0 a 1)
    }
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: withSpring(progressWidth.value, { damping: 10, stiffness: 100 }), // Anima√ß√£o suave
    };
  });

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
  };

  const toggleLike = () => {
    setIsLiked((prev) => !prev); // Alterna entre "gostei" e "n√£o gostei"
  };

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <View style={styles.container}>
        {/* Capa do √Ålbum */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Informa√ß√µes da M√∫sica */}
        <View style={styles.trackInfo}>
          <Text style={styles.title}>{currentTrack.title}</Text>
          <Text style={styles.artist}>{currentTrack.artist}</Text>
        </View>

        {/* √çcone de Gostei */}
        <TouchableOpacity onPress={toggleLike} style={styles.likeButton}>
          <Ionicons
            name={isLiked ? 'heart' : 'heart-outline'}
            size={32}
            color={isLiked ? '#1DB954' : '#fff'}
          />
        </TouchableOpacity>

        {/* Barra de Progresso Interativa */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(progress * 180)}</Text> {/* Tempo decorrido */}
          <View style={styles.progressBar}>
            <PanGestureHandler onGestureEvent={onGestureEvent}>
              <Animated.View style={[styles.progress, progressStyle]} />
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(180)}</Text> {/* Tempo total */}
        </View>

        {/* Controles */}
        <View style={styles.controls}>
          <TouchableOpacity onPress={handlePrevious}>
            <Ionicons name="play-skip-back" size={32} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.playButton}>
            <Ionicons name="play" size={48} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity onPress={handleNext}>
            <Ionicons name="play-skip-forward" size={32} color="#fff" />
          </TouchableOpacity>
        </View>

        {/* Footer */}
        <Text style={styles.footer}>RM12345 - Seu Nome Completo</Text>
      </View>
    </GestureHandlerRootView>
  );
};

// Estilos
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  albumArt: {
    width: 300,
    height: 300,
    borderRadius: 20,
    marginBottom: 30,
  },
  trackInfo: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },
  artist: {
    color: '#888',
    fontSize: 18,
  },
  likeButton: {
    position: 'absolute',
    top: 40,
    right: 20,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
    marginBottom: 30,
  },
  progressBar: {
    flex: 1,
    height: 3,
    backgroundColor: '#444',
    marginHorizontal: 10,
  },
  progress: {
    height: '100%',
    backgroundColor: '#1DB954',
  },
  timeText: {
    color: '#888',
    fontSize: 14,
  },
  controls: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '80%',
  },
  playButton: {
    backgroundColor: '#1DB954',
    padding: 20,
    borderRadius: 50,
  },
  footer: {
    position: 'absolute',
    bottom: 20,
    color: '#888',
    fontSize: 12,
  },
});

export default MusicPlayerStatic;
üéØ O que foi adicionado?
√çcone de Gostei:

Um √≠cone de cora√ß√£o (heart-outline quando n√£o curtido e heart quando curtido).

O √≠cone muda de cor (branco para verde) quando a m√∫sica √© curtida.

Funcionalidade de Gostei:

Um estado isLiked controla se a m√∫sica foi curtida.

A fun√ß√£o toggleLike alterna entre "gostei" e "n√£o gostei".

Posicionamento do √çcone:

O √≠cone de gostei foi posicionado no canto superior direito da tela.

‚ñ∂Ô∏è Como testar?
Inicie o servidor de desenvolvimento:

No terminal, execute:

bash
Copy
npm start
Isso abrir√° uma interface no navegador com um QR Code.

Execute no seu dispositivo:

Baixe o app Expo Go na Play Store (Android) ou App Store (iOS).

Escaneie o QR Code com o app para ver o projeto rodando no seu celular.

Teste o √≠cone de gostei:

Toque no √≠cone de cora√ß√£o para curtir ou descurtir a m√∫sica.

üñºÔ∏è Resultado Esperado
O √≠cone de cora√ß√£o aparece no canto superior direito.

Ao tocar no √≠cone, ele muda de heart-outline (n√£o curtido) para heart (curtido) e muda de cor.

O estado de "gostei" √© resetado ao trocar de m√∫sica.

üöÄ Pr√≥ximos Passos (Opcional)
Salvar m√∫sicas curtidas:

Use o AsyncStorage para salvar as m√∫sicas favoritas do usu√°rio.

Adicionar anima√ß√£o ao √≠cone de gostei:

Use react-native-reanimated para animar o √≠cone ao ser clicado.

Integrar com um backend:

Envie as m√∫sicas curtidas para um servidor.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

import { FontAwesome, Ionicons } from '@expo/vector-icons';
import React, { useEffect, useState } from 'react';
import { Dimensions, Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';

// Track list
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    duration: 203, // in seconds
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    duration: 187,
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    duration: 271,
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
];

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.85;

const ModernMusicPlayer: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);

  const progressAnim = useSharedValue(0);
  const currentTrack = tracks[currentTrackIndex];

  // Simulate track playing when isPlaying is true
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= currentTrack.duration) {
            handleNext();
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isPlaying, currentTrackIndex]);

  // Update progress animation based on current time
  useEffect(() => {
    const progress = currentTime / currentTrack.duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setCurrentTime(0);
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setCurrentTime(0);
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;

    const newTime = (progress / PROGRESS_BAR_WIDTH) * currentTrack.duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Blurred Album Art Background */}
        <View style={styles.backgroundImageContainer}>
          <Image
            source={currentTrack.artwork}
            style={styles.backgroundImage}
            blurRadius={80}
          />
          <View style={styles.overlay} />
        </View>

        {/* Album Art */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Track Info */}
        <View style={styles.infoContainer}>
          <Text style={styles.trackTitle} numberOfLines={1}>{currentTrack.title}</Text>
          <Text style={styles.artistName} numberOfLines={1}>{currentTrack.artist}</Text>
        </View>

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(currentTrack.duration)}</Text>
        </View>

        {/* Control Buttons */}
        <View style={styles.controlsContainer}>
          <TouchableOpacity onPress={handlePrevious} style={styles.sideButton}>
            <Ionicons name="play-skip-back-sharp" size={24} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity onPress={handlePlayPause} style={styles.playButton}>
            <FontAwesome
              name={isPlaying ? "pause" : "play"}
              size={28}
              color="#000"
              style={isPlaying ? styles.pauseIcon : styles.playIcon}
            />
          </TouchableOpacity>

          <TouchableOpacity onPress={handleNext} style={styles.sideButton}>
            <Ionicons name="play-skip-forward-sharp" size={24} color="#fff" />
          </TouchableOpacity>
        </View>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  backgroundImageContainer: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.7,
  },
  backgroundImage: {
    width: '100%',
    height: '100%',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
  },
  albumArt: {
    width: width * 0.7,
    height: width * 0.7,
    borderRadius: 10,
    marginBottom: 40,
  },
  infoContainer: {
    width: width * 0.85,
    alignItems: 'center',
    marginBottom: 30,
  },
  trackTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 5,
  },
  artistName: {
    color: '#aaa',
    fontSize: 16,
    textAlign: 'center',
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.9,
    marginBottom: 40,
  },
  timeText: {
    color: '#aaa',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 6,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 3,
    marginHorizontal: 8,
    overflow: 'hidden',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#1ad1c3',
    borderRadius: 3,
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: width * 0.7,
  },
  sideButton: {
    padding: 15,
  },
  playButton: {
    backgroundColor: '#1ad1c3',
    width: 70,
    height: 70,
    borderRadius: 35,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 40,
  },
  playIcon: {
    marginLeft: 4,
  },
  pauseIcon: {
    marginLeft: 0,
  },
});

export default ModernMusicPlayer; inclua as altera√ß√µes nesse codigo
Vou incluir as altera√ß√µes que voc√™ pediu no c√≥digo fornecido. Vamos adicionar o √≠cone de "gostei" e garantir que ele funcione corretamente. Tamb√©m vou manter todas as funcionalidades existentes, como a barra de progresso interativa e a troca de m√∫sicas.

üõ†Ô∏è Altera√ß√µes Realizadas
Adicionar o √≠cone de "gostei":

Um √≠cone de cora√ß√£o (heart e heart-outline) ser√° exibido no canto superior direito.

O √≠cone muda de cor (branco para verde) quando a m√∫sica √© curtida.

Funcionalidade de "gostei":

Um estado isLiked controla se a m√∫sica foi curtida.

A fun√ß√£o toggleLike alterna entre "gostei" e "n√£o gostei".

Resetar o estado de "gostei" ao trocar de m√∫sica:

Quando o usu√°rio troca de m√∫sica, o estado de "gostei" √© resetado.

üéØ C√≥digo Atualizado
tsx
Copy
import { FontAwesome, Ionicons } from '@expo/vector-icons';
import React, { useEffect, useState } from 'react';
import { Dimensions, Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';

// Track list
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    duration: 203, // in seconds
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    duration: 187,
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    duration: 271,
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
];

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.85;

const ModernMusicPlayer: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [isLiked, setIsLiked] = useState(false); // Estado de "gostei"

  const progressAnim = useSharedValue(0);
  const currentTrack = tracks[currentTrackIndex];

  // Simulate track playing when isPlaying is true
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= currentTrack.duration) {
            handleNext();
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isPlaying, currentTrackIndex]);

  // Update progress animation based on current time
  useEffect(() => {
    const progress = currentTime / currentTrack.duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const toggleLike = () => {
    setIsLiked((prev) => !prev); // Alterna entre "gostei" e "n√£o gostei"
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;

    const newTime = (progress / PROGRESS_BAR_WIDTH) * currentTrack.duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Blurred Album Art Background */}
        <View style={styles.backgroundImageContainer}>
          <Image
            source={currentTrack.artwork}
            style={styles.backgroundImage}
            blurRadius={80}
          />
          <View style={styles.overlay} />
        </View>

        {/* Album Art */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Track Info */}
        <View style={styles.infoContainer}>
          <Text style={styles.trackTitle} numberOfLines={1}>{currentTrack.title}</Text>
          <Text style={styles.artistName} numberOfLines={1}>{currentTrack.artist}</Text>
        </View>

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(currentTrack.duration)}</Text>
        </View>

        {/* Control Buttons */}
        <View style={styles.controlsContainer}>
          <TouchableOpacity onPress={handlePrevious} style={styles.sideButton}>
            <Ionicons name="play-skip-back-sharp" size={24} color="#fff" />
          </TouchableOpacity>

          <TouchableOpacity onPress={handlePlayPause} style={styles.playButton}>
            <FontAwesome
              name={isPlaying ? "pause" : "play"}
              size={28}
              color="#000"
              style={isPlaying ? styles.pauseIcon : styles.playIcon}
            />
          </TouchableOpacity>

          <TouchableOpacity onPress={handleNext} style={styles.sideButton}>
            <Ionicons name="play-skip-forward-sharp" size={24} color="#fff" />
          </TouchableOpacity>
        </View>

        {/* √çcone de Gostei */}
        <TouchableOpacity onPress={toggleLike} style={styles.likeButton}>
          <Ionicons
            name={isLiked ? 'heart' : 'heart-outline'}
            size={32}
            color={isLiked ? '#1ad1c3' : '#fff'}
          />
        </TouchableOpacity>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  backgroundImageContainer: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.7,
  },
  backgroundImage: {
    width: '100%',
    height: '100%',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
  },
  albumArt: {
    width: width * 0.7,
    height: width * 0.7,
    borderRadius: 10,
    marginBottom: 40,
  },
  infoContainer: {
    width: width * 0.85,
    alignItems: 'center',
    marginBottom: 30,
  },
  trackTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 5,
  },
  artistName: {
    color: '#aaa',
    fontSize: 16,
    textAlign: 'center',
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.9,
    marginBottom: 40,
  },
  timeText: {
    color: '#aaa',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 6,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 3,
    marginHorizontal: 8,
    overflow: 'hidden',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#1ad1c3',
    borderRadius: 3,
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: width * 0.7,
  },
  sideButton: {
    padding: 15,
  },
  playButton: {
    backgroundColor: '#1ad1c3',
    width: 70,
    height: 70,
    borderRadius: 35,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 40,
  },
  playIcon: {
    marginLeft: 4,
  },
  pauseIcon: {
    marginLeft: 0,
  },
  likeButton: {
    position: 'absolute',
    top: 40,
    right: 20,
  },
});

export default ModernMusicPlayer;
üñºÔ∏è Resultado Esperado
O √≠cone de cora√ß√£o aparece no canto superior direito.

Ao tocar no √≠cone, ele muda de heart-outline (n√£o curtido) para heart (curtido) e muda de cor.

O estado de "gostei" √© resetado ao trocar de m√∫sica.

üöÄ Pr√≥ximos Passos (Opcional)
Salvar m√∫sicas curtidas:

Use o AsyncStorage para salvar as m√∫sicas favoritas do usu√°rio.

Adicionar anima√ß√£o ao √≠cone de gostei:

Use react-native-reanimated para animar o √≠cone ao ser clicado.

Integrar com um backend:

Envie as m√∫sicas curtidas para um servidor.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

tipo assim import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Dimensions } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';
import { MaterialIcons, Ionicons, MaterialCommunityIcons, FontAwesome } from '@expo/vector-icons';

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.9;

const SpotifyPlayer: React.FC = () => {
  const [isPlaying, setIsPlaying] = useState(true);
  const [currentTime, setCurrentTime] = useState(142); // 2:22
  const [duration] = useState(215); // 3:35
  const [isLiked, setIsLiked] = useState(true);
  
  const progressAnim = useSharedValue((currentTime / duration) * PROGRESS_BAR_WIDTH);

  // Update progress bar position
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= duration) {
            setIsPlaying(false);
            return duration;
          }
          return prev + 1;
        });
      }, 1000);
    }
    
    return () => clearInterval(interval);
  }, [isPlaying, duration]);
  
  // Update progress animation value when currentTime changes
  useEffect(() => {
    const progress = currentTime / duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime, duration]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleLike = () => {
    setIsLiked(!isLiked);
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };
  
  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;
    
    const newTime = (progress / PROGRESS_BAR_WIDTH) * duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Heart Icon */}
        <TouchableOpacity style={styles.heartIcon} onPress={handleLike}>
          <FontAwesome name="heart" size={24} color={isLiked ? "#1DB954" : "#888"} />
        </TouchableOpacity>
        
        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
                <Animated.View style={[styles.progressThumb, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(duration)}</Text>
        </View>
        
        {/* Control Buttons Row */}
        <View style={styles.controlsContainer}>
          {/* Shuffle */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialCommunityIcons name="shuffle-variant" size={24} color="#FFFFFF" />
          </TouchableOpacity>
          
          {/* Previous */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialIcons name="skip-previous" size={36} color="#FFFFFF" />
          </TouchableOpacity>
          
          {/* Play/Pause */}
          <TouchableOpacity onPress={handlePlayPause} style={styles.playPauseButton}>
            <MaterialIcons name={isPlaying ? "pause" : "play-arrow"} size={36} color="#000000" />
          </TouchableOpacity>
          
          {/* Next */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialIcons name="skip-next" size={36} color="#FFFFFF" />
          </TouchableOpacity>
          
          {/* Repeat */}
          <TouchableOpacity style={styles.controlButton}>
            <Ionicons name="repeat" size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>
        
        {/* Bottom Icons */}
        <View style={styles.bottomIconsContainer}>
          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialCommunityIcons name="devices" size={22} color="#888" />
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialIcons name="queue-music" size={22} color="#888" />
          </TouchableOpacity>
        </View>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
  },
  heartIcon: {
    position: 'absolute',
    top: 20,
    right: 20,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.95,
    marginBottom: 30,
  },
  timeText: {
    color: '#888',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 4,
    backgroundColor: 'rgba(255,255,255,0.3)',
    marginHorizontal: 8,
    borderRadius: 2,
    overflow: 'visible',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
    position: 'relative',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#FFFFFF',
    borderRadius: 2,
  },
  progressThumb: {
    position: 'absolute',
    right: 0,
    top: -6,
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#FFFFFF',
    transform: [{ translateX: 6 }],
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: width * 0.8,
    marginBottom: 40,
  },
  controlButton: {
    padding: 10,
  },
  playPauseButton: {
    backgroundColor: '#FFFFFF',
    width: 64,
    height: 64,
    borderRadius: 32,
    alignItems: 'center',
    justifyContent: 'center',
  },
  bottomIconsContainer: {
    position: 'absolute',
    bottom: 20,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
  },
  bottomIcon: {
    padding: 10,
  },
});

export default SpotifyPlayer;
Vamos integrar as funcionalidades do seu c√≥digo anterior (como o √≠cone de "gostei", a barra de progresso interativa e os controles de m√∫sica) com o layout e estilo que voc√™ forneceu. O objetivo √© manter a estrutura do Spotify Player, mas com as funcionalidades que voc√™ j√° implementou.

üõ†Ô∏è Altera√ß√µes Realizadas
√çcone de "gostei":

Adicionado no canto superior direito.

Muda de cor (cinza para verde) quando a m√∫sica √© curtida.

Barra de Progresso Interativa:

Permite arrastar para ajustar o tempo da m√∫sica.

Exibe o tempo decorrido e o tempo total.

Controles de M√∫sica:

Bot√µes de play/pause, pr√≥ximo, anterior, shuffle e repeat.

√çcones Inferiores:

√çcones para "dispositivos" e "fila de m√∫sicas".

üéØ C√≥digo Atualizado
tsx
Copy
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Dimensions } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';
import { MaterialIcons, Ionicons, MaterialCommunityIcons, FontAwesome } from '@expo/vector-icons';

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.9;

const SpotifyPlayer: React.FC = () => {
  const [isPlaying, setIsPlaying] = useState(true);
  const [currentTime, setCurrentTime] = useState(142); // 2:22
  const [duration] = useState(215); // 3:35
  const [isLiked, setIsLiked] = useState(true);

  const progressAnim = useSharedValue((currentTime / duration) * PROGRESS_BAR_WIDTH);

  // Simulate track playing when isPlaying is true
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= duration) {
            setIsPlaying(false);
            return duration;
          }
          return prev + 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isPlaying, duration]);

  // Update progress animation value when currentTime changes
  useEffect(() => {
    const progress = currentTime / duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime, duration]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleLike = () => {
    setIsLiked(!isLiked);
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;

    const newTime = (progress / PROGRESS_BAR_WIDTH) * duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Heart Icon */}
        <TouchableOpacity style={styles.heartIcon} onPress={handleLike}>
          <FontAwesome name="heart" size={24} color={isLiked ? "#1DB954" : "#888"} />
        </TouchableOpacity>

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
                <Animated.View style={[styles.progressThumb, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(duration)}</Text>
        </View>

        {/* Control Buttons Row */}
        <View style={styles.controlsContainer}>
          {/* Shuffle */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialCommunityIcons name="shuffle-variant" size={24} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Previous */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialIcons name="skip-previous" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Play/Pause */}
          <TouchableOpacity onPress={handlePlayPause} style={styles.playPauseButton}>
            <MaterialIcons name={isPlaying ? "pause" : "play-arrow"} size={36} color="#000000" />
          </TouchableOpacity>

          {/* Next */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialIcons name="skip-next" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Repeat */}
          <TouchableOpacity style={styles.controlButton}>
            <Ionicons name="repeat" size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        {/* Bottom Icons */}
        <View style={styles.bottomIconsContainer}>
          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialCommunityIcons name="devices" size={22} color="#888" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialIcons name="queue-music" size={22} color="#888" />
          </TouchableOpacity>
        </View>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
  },
  heartIcon: {
    position: 'absolute',
    top: 20,
    right: 20,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.95,
    marginBottom: 30,
  },
  timeText: {
    color: '#888',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 4,
    backgroundColor: 'rgba(255,255,255,0.3)',
    marginHorizontal: 8,
    borderRadius: 2,
    overflow: 'visible',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
    position: 'relative',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#FFFFFF',
    borderRadius: 2,
  },
  progressThumb: {
    position: 'absolute',
    right: 0,
    top: -6,
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#FFFFFF',
    transform: [{ translateX: 6 }],
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: width * 0.8,
    marginBottom: 40,
  },
  controlButton: {
    padding: 10,
  },
  playPauseButton: {
    backgroundColor: '#FFFFFF',
    width: 64,
    height: 64,
    borderRadius: 32,
    alignItems: 'center',
    justifyContent: 'center',
  },
  bottomIconsContainer: {
    position: 'absolute',
    bottom: 20,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
  },
  bottomIcon: {
    padding: 10,
  },
});

export default SpotifyPlayer;
üñºÔ∏è Resultado Esperado
√çcone de "gostei" no canto superior direito.

Barra de progresso interativa que pode ser arrastada.

Controles de m√∫sica (play/pause, pr√≥ximo, anterior, shuffle e repeat).

√çcones inferiores para "dispositivos" e "fila de m√∫sicas".

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar anima√ß√µes:

Use react-native-reanimated para animar o √≠cone de "gostei" e a barra de progresso.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Adicionar funcionalidade de shuffle e repeat:

Implemente a l√≥gica para shuffle e repeat.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

era pra incluir naquele codigo kkkkkk e mantenha aquele  outro estilo
Ah, entendi! Voc√™ quer que eu inclua as funcionalidades do c√≥digo anterior (como o √≠cone de "gostei", a barra de progresso interativa e os controles de m√∫sica) no estilo do primeiro c√≥digo que voc√™ forneceu (com a capa do √°lbum, fundo desfocado, etc.). Vou fazer isso mantendo o layout e o estilo do primeiro c√≥digo, mas adicionando as funcionalidades do segundo.

üõ†Ô∏è Altera√ß√µes Realizadas
√çcone de "gostei":

Adicionado no canto superior direito.

Muda de cor (cinza para verde) quando a m√∫sica √© curtida.

Barra de Progresso Interativa:

Permite arrastar para ajustar o tempo da m√∫sica.

Exibe o tempo decorrido e o tempo total.

Controles de M√∫sica:

Bot√µes de play/pause, pr√≥ximo, anterior, shuffle e repeat.

√çcones Inferiores:

√çcones para "dispositivos" e "fila de m√∫sicas".

üéØ C√≥digo Atualizado
tsx
Copy
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Dimensions, Image } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';
import { MaterialIcons, Ionicons, MaterialCommunityIcons, FontAwesome } from '@expo/vector-icons';

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.85;

// Track list
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    duration: 203, // in seconds
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    duration: 187,
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    duration: 271,
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
];

const ModernMusicPlayer: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [isLiked, setIsLiked] = useState(false);

  const progressAnim = useSharedValue(0);
  const currentTrack = tracks[currentTrackIndex];

  // Simulate track playing when isPlaying is true
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= currentTrack.duration) {
            handleNext();
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isPlaying, currentTrackIndex]);

  // Update progress animation based on current time
  useEffect(() => {
    const progress = currentTime / currentTrack.duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const toggleLike = () => {
    setIsLiked((prev) => !prev); // Alterna entre "gostei" e "n√£o gostei"
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;

    const newTime = (progress / PROGRESS_BAR_WIDTH) * currentTrack.duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Blurred Album Art Background */}
        <View style={styles.backgroundImageContainer}>
          <Image
            source={currentTrack.artwork}
            style={styles.backgroundImage}
            blurRadius={80}
          />
          <View style={styles.overlay} />
        </View>

        {/* Album Art */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Track Info */}
        <View style={styles.infoContainer}>
          <Text style={styles.trackTitle} numberOfLines={1}>{currentTrack.title}</Text>
          <Text style={styles.artistName} numberOfLines={1}>{currentTrack.artist}</Text>
        </View>

        {/* Heart Icon */}
        <TouchableOpacity style={styles.heartIcon} onPress={toggleLike}>
          <FontAwesome name={isLiked ? 'heart' : 'heart-outline'} size={24} color={isLiked ? '#1ad1c3' : '#fff'} />
        </TouchableOpacity>

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(currentTrack.duration)}</Text>
        </View>

        {/* Control Buttons */}
        <View style={styles.controlsContainer}>
          {/* Shuffle */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialCommunityIcons name="shuffle-variant" size={24} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Previous */}
          <TouchableOpacity onPress={handlePrevious} style={styles.controlButton}>
            <MaterialIcons name="skip-previous" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Play/Pause */}
          <TouchableOpacity onPress={handlePlayPause} style={styles.playPauseButton}>
            <MaterialIcons name={isPlaying ? "pause" : "play-arrow"} size={36} color="#000000" />
          </TouchableOpacity>

          {/* Next */}
          <TouchableOpacity onPress={handleNext} style={styles.controlButton}>
            <MaterialIcons name="skip-next" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Repeat */}
          <TouchableOpacity style={styles.controlButton}>
            <Ionicons name="repeat" size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        {/* Bottom Icons */}
        <View style={styles.bottomIconsContainer}>
          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialCommunityIcons name="devices" size={22} color="#888" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialIcons name="queue-music" size={22} color="#888" />
          </TouchableOpacity>
        </View>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  backgroundImageContainer: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.7,
  },
  backgroundImage: {
    width: '100%',
    height: '100%',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
  },
  albumArt: {
    width: width * 0.7,
    height: width * 0.7,
    borderRadius: 10,
    marginBottom: 40,
  },
  infoContainer: {
    width: width * 0.85,
    alignItems: 'center',
    marginBottom: 30,
  },
  trackTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 5,
  },
  artistName: {
    color: '#aaa',
    fontSize: 16,
    textAlign: 'center',
  },
  heartIcon: {
    position: 'absolute',
    top: 40,
    right: 20,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.9,
    marginBottom: 40,
  },
  timeText: {
    color: '#aaa',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 6,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 3,
    marginHorizontal: 8,
    overflow: 'hidden',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#1ad1c3',
    borderRadius: 3,
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: width * 0.7,
  },
  controlButton: {
    padding: 15,
  },
  playPauseButton: {
    backgroundColor: '#1ad1c3',
    width: 70,
    height: 70,
    borderRadius: 35,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 40,
  },
  bottomIconsContainer: {
    position: 'absolute',
    bottom: 20,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
  },
  bottomIcon: {
    padding: 10,
  },
});

export default ModernMusicPlayer;
üñºÔ∏è Resultado Esperado
√çcone de "gostei" no canto superior direito.

Barra de progresso interativa que pode ser arrastada.

Controles de m√∫sica (play/pause, pr√≥ximo, anterior, shuffle e repeat).

√çcones inferiores para "dispositivos" e "fila de m√∫sicas".

Layout com fundo desfocado e capa do √°lbum centralizada.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar anima√ß√µes:

Use react-native-reanimated para animar o √≠cone de "gostei" e a barra de progresso.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Adicionar funcionalidade de shuffle e repeat:

Implemente a l√≥gica para shuffle e repeat.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

joga o nome da musica pro lado esquerdo e artista sabe
Claro! Vou ajustar o layout para que o nome da m√∫sica fique √† esquerda e o nome do artista √† direita, alinhados horizontalmente. Isso dar√° um visual mais moderno e organizado, semelhante ao que voc√™ mencionou.

üõ†Ô∏è Altera√ß√µes Realizadas
Ajuste no layout das informa√ß√µes da m√∫sica:

O nome da m√∫sica ficar√° √† esquerda.

O nome do artista ficar√° √† direita.

Ambos estar√£o na mesma linha, com espa√ßo entre eles.

Manuten√ß√£o do estilo atual:

O fundo desfocado, a capa do √°lbum e os controles permanecem inalterados.

üéØ C√≥digo Atualizado
tsx
Copy
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Dimensions, Image } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';
import { MaterialIcons, Ionicons, MaterialCommunityIcons, FontAwesome } from '@expo/vector-icons';

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.85;

// Track list
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    duration: 203, // in seconds
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    duration: 187,
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    duration: 271,
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
];

const ModernMusicPlayer: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [isLiked, setIsLiked] = useState(false);

  const progressAnim = useSharedValue(0);
  const currentTrack = tracks[currentTrackIndex];

  // Simulate track playing when isPlaying is true
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= currentTrack.duration) {
            handleNext();
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isPlaying, currentTrackIndex]);

  // Update progress animation based on current time
  useEffect(() => {
    const progress = currentTime / currentTrack.duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const toggleLike = () => {
    setIsLiked((prev) => !prev); // Alterna entre "gostei" e "n√£o gostei"
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;

    const newTime = (progress / PROGRESS_BAR_WIDTH) * currentTrack.duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Blurred Album Art Background */}
        <View style={styles.backgroundImageContainer}>
          <Image
            source={currentTrack.artwork}
            style={styles.backgroundImage}
            blurRadius={80}
          />
          <View style={styles.overlay} />
        </View>

        {/* Album Art */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Track Info */}
        <View style={styles.infoContainer}>
          <Text style={styles.trackTitle} numberOfLines={1}>
            {currentTrack.title}
          </Text>
          <Text style={styles.artistName} numberOfLines={1}>
            {currentTrack.artist}
          </Text>
        </View>

        {/* Heart Icon */}
        <TouchableOpacity style={styles.heartIcon} onPress={toggleLike}>
          <FontAwesome name={isLiked ? 'heart' : 'heart-outline'} size={24} color={isLiked ? '#1ad1c3' : '#fff'} />
        </TouchableOpacity>

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(currentTrack.duration)}</Text>
        </View>

        {/* Control Buttons */}
        <View style={styles.controlsContainer}>
          {/* Shuffle */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialCommunityIcons name="shuffle-variant" size={24} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Previous */}
          <TouchableOpacity onPress={handlePrevious} style={styles.controlButton}>
            <MaterialIcons name="skip-previous" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Play/Pause */}
          <TouchableOpacity onPress={handlePlayPause} style={styles.playPauseButton}>
            <MaterialIcons name={isPlaying ? "pause" : "play-arrow"} size={36} color="#000000" />
          </TouchableOpacity>

          {/* Next */}
          <TouchableOpacity onPress={handleNext} style={styles.controlButton}>
            <MaterialIcons name="skip-next" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Repeat */}
          <TouchableOpacity style={styles.controlButton}>
            <Ionicons name="repeat" size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        {/* Bottom Icons */}
        <View style={styles.bottomIconsContainer}>
          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialCommunityIcons name="devices" size={22} color="#888" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialIcons name="queue-music" size={22} color="#888" />
          </TouchableOpacity>
        </View>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  backgroundImageContainer: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.7,
  },
  backgroundImage: {
    width: '100%',
    height: '100%',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
  },
  albumArt: {
    width: width * 0.7,
    height: width * 0.7,
    borderRadius: 10,
    marginBottom: 40,
  },
  infoContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: width * 0.85,
    marginBottom: 30,
  },
  trackTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    flex: 1,
    marginRight: 10,
  },
  artistName: {
    color: '#aaa',
    fontSize: 16,
    flex: 1,
    textAlign: 'right',
  },
  heartIcon: {
    position: 'absolute',
    top: 40,
    right: 20,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.9,
    marginBottom: 40,
  },
  timeText: {
    color: '#aaa',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 6,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 3,
    marginHorizontal: 8,
    overflow: 'hidden',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#1ad1c3',
    borderRadius: 3,
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: width * 0.7,
  },
  controlButton: {
    padding: 15,
  },
  playPauseButton: {
    backgroundColor: '#1ad1c3',
    width: 70,
    height: 70,
    borderRadius: 35,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 40,
  },
  bottomIconsContainer: {
    position: 'absolute',
    bottom: 20,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
  },
  bottomIcon: {
    padding: 10,
  },
});

export default ModernMusicPlayer;
üñºÔ∏è Resultado Esperado
Nome da m√∫sica √† esquerda.

Nome do artista √† direita.

Ambos alinhados horizontalmente, com espa√ßo entre eles.

Layout moderno e organizado, mantendo o estilo do fundo desfocado e a capa do √°lbum.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar anima√ß√µes:

Use react-native-reanimated para animar o √≠cone de "gostei" e a barra de progresso.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Adicionar funcionalidade de shuffle e repeat:

Implemente a l√≥gica para shuffle e repeat.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

eu falei os dois na esquerda
Ah, entendi agora! Voc√™ quer que o nome da m√∫sica e o nome do artista fiquem ambos √† esquerda, um embaixo do outro. Vou ajustar o layout para que o nome da m√∫sica fique acima e o nome do artista logo abaixo, alinhados √† esquerda.

üõ†Ô∏è Altera√ß√µes Realizadas
Ajuste no layout das informa√ß√µes da m√∫sica:

O nome da m√∫sica ficar√° acima.

O nome do artista ficar√° logo abaixo.

Ambos estar√£o alinhados √† esquerda.

Manuten√ß√£o do estilo atual:

O fundo desfocado, a capa do √°lbum e os controles permanecem inalterados.

üéØ C√≥digo Atualizado
tsx
Copy
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Dimensions, Image } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';
import { MaterialIcons, Ionicons, MaterialCommunityIcons, FontAwesome } from '@expo/vector-icons';

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.85;

// Track list
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    duration: 203, // in seconds
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    duration: 187,
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    duration: 271,
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
];

const ModernMusicPlayer: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [isLiked, setIsLiked] = useState(false);

  const progressAnim = useSharedValue(0);
  const currentTrack = tracks[currentTrackIndex];

  // Simulate track playing when isPlaying is true
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= currentTrack.duration) {
            handleNext();
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isPlaying, currentTrackIndex]);

  // Update progress animation based on current time
  useEffect(() => {
    const progress = currentTime / currentTrack.duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const toggleLike = () => {
    setIsLiked((prev) => !prev); // Alterna entre "gostei" e "n√£o gostei"
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;

    const newTime = (progress / PROGRESS_BAR_WIDTH) * currentTrack.duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Blurred Album Art Background */}
        <View style={styles.backgroundImageContainer}>
          <Image
            source={currentTrack.artwork}
            style={styles.backgroundImage}
            blurRadius={80}
          />
          <View style={styles.overlay} />
        </View>

        {/* Album Art */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Track Info */}
        <View style={styles.infoContainer}>
          <Text style={styles.trackTitle} numberOfLines={1}>
            {currentTrack.title}
          </Text>
          <Text style={styles.artistName} numberOfLines={1}>
            {currentTrack.artist}
          </Text>
        </View>

        {/* Heart Icon */}
        <TouchableOpacity style={styles.heartIcon} onPress={toggleLike}>
          <FontAwesome name={isLiked ? 'heart' : 'heart-outline'} size={24} color={isLiked ? '#1ad1c3' : '#fff'} />
        </TouchableOpacity>

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(currentTrack.duration)}</Text>
        </View>

        {/* Control Buttons */}
        <View style={styles.controlsContainer}>
          {/* Shuffle */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialCommunityIcons name="shuffle-variant" size={24} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Previous */}
          <TouchableOpacity onPress={handlePrevious} style={styles.controlButton}>
            <MaterialIcons name="skip-previous" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Play/Pause */}
          <TouchableOpacity onPress={handlePlayPause} style={styles.playPauseButton}>
            <MaterialIcons name={isPlaying ? "pause" : "play-arrow"} size={36} color="#000000" />
          </TouchableOpacity>

          {/* Next */}
          <TouchableOpacity onPress={handleNext} style={styles.controlButton}>
            <MaterialIcons name="skip-next" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Repeat */}
          <TouchableOpacity style={styles.controlButton}>
            <Ionicons name="repeat" size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        {/* Bottom Icons */}
        <View style={styles.bottomIconsContainer}>
          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialCommunityIcons name="devices" size={22} color="#888" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialIcons name="queue-music" size={22} color="#888" />
          </TouchableOpacity>
        </View>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  backgroundImageContainer: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.7,
  },
  backgroundImage: {
    width: '100%',
    height: '100%',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
  },
  albumArt: {
    width: width * 0.7,
    height: width * 0.7,
    borderRadius: 10,
    marginBottom: 40,
  },
  infoContainer: {
    width: width * 0.85,
    alignItems: 'flex-start', // Alinha √† esquerda
    marginBottom: 30,
  },
  trackTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5, // Espa√ßo entre o t√≠tulo e o artista
  },
  artistName: {
    color: '#aaa',
    fontSize: 16,
  },
  heartIcon: {
    position: 'absolute',
    top: 40,
    right: 20,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.9,
    marginBottom: 40,
  },
  timeText: {
    color: '#aaa',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 6,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 3,
    marginHorizontal: 8,
    overflow: 'hidden',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#1ad1c3',
    borderRadius: 3,
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: width * 0.7,
  },
  controlButton: {
    padding: 15,
  },
  playPauseButton: {
    backgroundColor: '#1ad1c3',
    width: 70,
    height: 70,
    borderRadius: 35,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 40,
  },
  bottomIconsContainer: {
    position: 'absolute',
    bottom: 20,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
  },
  bottomIcon: {
    padding: 10,
  },
});

export default ModernMusicPlayer;
üñºÔ∏è Resultado Esperado
Nome da m√∫sica acima.

Nome do artista logo abaixo.

Ambos alinhados √† esquerda.

Layout moderno e organizado, mantendo o estilo do fundo desfocado e a capa do √°lbum.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar anima√ß√µes:

Use react-native-reanimated para animar o √≠cone de "gostei" e a barra de progresso.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Adicionar funcionalidade de shuffle e repeat:

Implemente a l√≥gica para shuffle e repeat.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

<FontAwesome name={isLiked ? 'heart' : 'heart-outline'} size={24} color={isLiked ? '#1ad1c3' : '#fff'} />
deu erro aqui
O erro ocorre porque o √≠cone heart-outline n√£o existe na biblioteca @expo/vector-icons para o FontAwesome. O √≠cone correto para o cora√ß√£o vazio no FontAwesome √© heart-o.

Vou corrigir o c√≥digo para usar o √≠cone correto. Aqui est√° a linha atualizada:

tsx
Copy
<FontAwesome name={isLiked ? 'heart' : 'heart-o'} size={24} color={isLiked ? '#1ad1c3' : '#fff'} />
üõ†Ô∏è Por que o erro ocorreu?
O √≠cone heart-outline √© usado em outras bibliotecas de √≠cones, como o MaterialCommunityIcons.

No FontAwesome, o √≠cone para o cora√ß√£o vazio √© heart-o.

üéØ C√≥digo Corrigido
Aqui est√° o trecho do c√≥digo com a corre√ß√£o:

tsx
Copy
import { FontAwesome } from '@expo/vector-icons';

// Dentro do componente
<TouchableOpacity style={styles.heartIcon} onPress={toggleLike}>
  <FontAwesome name={isLiked ? 'heart' : 'heart-o'} size={24} color={isLiked ? '#1ad1c3' : '#fff'} />
</TouchableOpacity>
üñºÔ∏è Resultado Esperado
Quando a m√∫sica n√£o est√° curtida (isLiked = false), o √≠cone ser√° um cora√ß√£o vazio (heart-o).

Quando a m√∫sica est√° curtida (isLiked = true), o √≠cone ser√° um cora√ß√£o preenchido (heart).

A cor do √≠cone muda de branco (#fff) para verde (#1ad1c3) quando a m√∫sica √© curtida.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar anima√ß√µes:

Use react-native-reanimated para animar o √≠cone de "gostei" ao ser clicado.

Integrar com um backend:

Salve as m√∫sicas curtidas no servidor ou no armazenamento local.

Melhorar a experi√™ncia do usu√°rio:

Adicione feedback visual ao curtir/descurtir uma m√∫sica.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

fa√ßa que eles fique assim no inicio do player
Claro! Vou ajustar o c√≥digo para que o nome da m√∫sica e o nome do artista fiquem alinhados √† esquerda, um embaixo do outro, no in√≠cio do player. Al√©m disso, vou garantir que o √≠cone de "gostei" fique no canto superior direito, como voc√™ solicitou.

üõ†Ô∏è Altera√ß√µes Realizadas
Ajuste no layout das informa√ß√µes da m√∫sica:

O nome da m√∫sica ficar√° acima.

O nome do artista ficar√° logo abaixo.

Ambos estar√£o alinhados √† esquerda, no in√≠cio do player.

Posicionamento do √≠cone de "gostei":

O √≠cone de "gostei" ficar√° no canto superior direito.

Manuten√ß√£o do estilo atual:

O fundo desfocado, a capa do √°lbum e os controles permanecem inalterados.

üéØ C√≥digo Atualizado
Aqui est√° o c√≥digo completo com as altera√ß√µes:

tsx
Copy
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Dimensions, Image } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';
import { MaterialIcons, Ionicons, MaterialCommunityIcons, FontAwesome } from '@expo/vector-icons';

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.85;

// Track list
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    duration: 203, // in seconds
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    duration: 187,
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    duration: 271,
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
];

const ModernMusicPlayer: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [isLiked, setIsLiked] = useState(false);

  const progressAnim = useSharedValue(0);
  const currentTrack = tracks[currentTrackIndex];

  // Simulate track playing when isPlaying is true
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= currentTrack.duration) {
            handleNext();
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isPlaying, currentTrackIndex]);

  // Update progress animation based on current time
  useEffect(() => {
    const progress = currentTime / currentTrack.duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const toggleLike = () => {
    setIsLiked((prev) => !prev); // Alterna entre "gostei" e "n√£o gostei"
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;

    const newTime = (progress / PROGRESS_BAR_WIDTH) * currentTrack.duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Blurred Album Art Background */}
        <View style={styles.backgroundImageContainer}>
          <Image
            source={currentTrack.artwork}
            style={styles.backgroundImage}
            blurRadius={80}
          />
          <View style={styles.overlay} />
        </View>

        {/* Track Info */}
        <View style={styles.infoContainer}>
          <Text style={styles.trackTitle} numberOfLines={1}>
            {currentTrack.title}
          </Text>
          <Text style={styles.artistName} numberOfLines={1}>
            {currentTrack.artist}
          </Text>
        </View>

        {/* Heart Icon */}
        <TouchableOpacity style={styles.heartIcon} onPress={toggleLike}>
          <FontAwesome name={isLiked ? 'heart' : 'heart-o'} size={24} color={isLiked ? '#1ad1c3' : '#fff'} />
        </TouchableOpacity>

        {/* Album Art */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(currentTrack.duration)}</Text>
        </View>

        {/* Control Buttons */}
        <View style={styles.controlsContainer}>
          {/* Shuffle */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialCommunityIcons name="shuffle-variant" size={24} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Previous */}
          <TouchableOpacity onPress={handlePrevious} style={styles.controlButton}>
            <MaterialIcons name="skip-previous" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Play/Pause */}
          <TouchableOpacity onPress={handlePlayPause} style={styles.playPauseButton}>
            <MaterialIcons name={isPlaying ? "pause" : "play-arrow"} size={36} color="#000000" />
          </TouchableOpacity>

          {/* Next */}
          <TouchableOpacity onPress={handleNext} style={styles.controlButton}>
            <MaterialIcons name="skip-next" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Repeat */}
          <TouchableOpacity style={styles.controlButton}>
            <Ionicons name="repeat" size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        {/* Bottom Icons */}
        <View style={styles.bottomIconsContainer}>
          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialCommunityIcons name="devices" size={22} color="#888" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialIcons name="queue-music" size={22} color="#888" />
          </TouchableOpacity>
        </View>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  backgroundImageContainer: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.7,
  },
  backgroundImage: {
    width: '100%',
    height: '100%',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
  },
  infoContainer: {
    width: width * 0.85,
    alignItems: 'flex-start', // Alinha √† esquerda
    marginBottom: 20, // Espa√ßo entre as informa√ß√µes e a capa do √°lbum
  },
  trackTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5, // Espa√ßo entre o t√≠tulo e o artista
  },
  artistName: {
    color: '#aaa',
    fontSize: 16,
  },
  heartIcon: {
    position: 'absolute',
    top: 40,
    right: 20,
  },
  albumArt: {
    width: width * 0.7,
    height: width * 0.7,
    borderRadius: 10,
    marginBottom: 40,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.9,
    marginBottom: 40,
  },
  timeText: {
    color: '#aaa',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 6,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 3,
    marginHorizontal: 8,
    overflow: 'hidden',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#1ad1c3',
    borderRadius: 3,
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: width * 0.7,
  },
  controlButton: {
    padding: 15,
  },
  playPauseButton: {
    backgroundColor: '#1ad1c3',
    width: 70,
    height: 70,
    borderRadius: 35,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 40,
  },
  bottomIconsContainer: {
    position: 'absolute',
    bottom: 20,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
  },
  bottomIcon: {
    padding: 10,
  },
});

export default ModernMusicPlayer;
üñºÔ∏è Resultado Esperado
Nome da m√∫sica e nome do artista alinhados √† esquerda, no in√≠cio do player.

√çcone de "gostei" no canto superior direito.

Layout moderno e organizado, mantendo o estilo do fundo desfocado e a capa do √°lbum.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar anima√ß√µes:

Use react-native-reanimated para animar o √≠cone de "gostei" ao ser clicado.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Adicionar funcionalidade de shuffle e repeat:

Implemente a l√≥gica para shuffle e repeat.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

eu falei da musica tipo andasse um pouco pra ficar no inicio do player e deixe o cora√ß√£o emaixo do lado do artista e musica do lado direito
Agora entendi! Voc√™ quer que o nome da m√∫sica e o nome do artista fiquem √† direita, com o √≠cone de "gostei" abaixo deles, alinhado √† direita. Vou ajustar o layout para que o texto e o √≠cone fiquem alinhados √† direita, com o √≠cone abaixo do nome do artista.

üõ†Ô∏è Altera√ß√µes Realizadas
Ajuste no layout das informa√ß√µes da m√∫sica:

O nome da m√∫sica e o nome do artista ficar√£o √† direita.

O √≠cone de "gostei" ficar√° abaixo do nome do artista, alinhado √† direita.

Manuten√ß√£o do estilo atual:

O fundo desfocado, a capa do √°lbum e os controles permanecem inalterados.

üéØ C√≥digo Atualizado
Aqui est√° o c√≥digo completo com as altera√ß√µes:

tsx
Copy
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Dimensions, Image } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';
import { MaterialIcons, Ionicons, MaterialCommunityIcons, FontAwesome } from '@expo/vector-icons';

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.85;

// Track list
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    duration: 203, // in seconds
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    duration: 187,
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    duration: 271,
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
];

const ModernMusicPlayer: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [isLiked, setIsLiked] = useState(false);

  const progressAnim = useSharedValue(0);
  const currentTrack = tracks[currentTrackIndex];

  // Simulate track playing when isPlaying is true
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= currentTrack.duration) {
            handleNext();
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isPlaying, currentTrackIndex]);

  // Update progress animation based on current time
  useEffect(() => {
    const progress = currentTime / currentTrack.duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const toggleLike = () => {
    setIsLiked((prev) => !prev); // Alterna entre "gostei" e "n√£o gostei"
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;

    const newTime = (progress / PROGRESS_BAR_WIDTH) * currentTrack.duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Blurred Album Art Background */}
        <View style={styles.backgroundImageContainer}>
          <Image
            source={currentTrack.artwork}
            style={styles.backgroundImage}
            blurRadius={80}
          />
          <View style={styles.overlay} />
        </View>

        {/* Album Art */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Track Info */}
        <View style={styles.infoContainer}>
          <View style={styles.textContainer}>
            <Text style={styles.trackTitle} numberOfLines={1}>
              {currentTrack.title}
            </Text>
            <Text style={styles.artistName} numberOfLines={1}>
              {currentTrack.artist}
            </Text>
          </View>
          <TouchableOpacity onPress={toggleLike} style={styles.heartIcon}>
            <FontAwesome name={isLiked ? 'heart' : 'heart-o'} size={24} color={isLiked ? '#1ad1c3' : '#fff'} />
          </TouchableOpacity>
        </View>

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(currentTrack.duration)}</Text>
        </View>

        {/* Control Buttons */}
        <View style={styles.controlsContainer}>
          {/* Shuffle */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialCommunityIcons name="shuffle-variant" size={24} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Previous */}
          <TouchableOpacity onPress={handlePrevious} style={styles.controlButton}>
            <MaterialIcons name="skip-previous" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Play/Pause */}
          <TouchableOpacity onPress={handlePlayPause} style={styles.playPauseButton}>
            <MaterialIcons name={isPlaying ? "pause" : "play-arrow"} size={36} color="#000000" />
          </TouchableOpacity>

          {/* Next */}
          <TouchableOpacity onPress={handleNext} style={styles.controlButton}>
            <MaterialIcons name="skip-next" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Repeat */}
          <TouchableOpacity style={styles.controlButton}>
            <Ionicons name="repeat" size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        {/* Bottom Icons */}
        <View style={styles.bottomIconsContainer}>
          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialCommunityIcons name="devices" size={22} color="#888" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialIcons name="queue-music" size={22} color="#888" />
          </TouchableOpacity>
        </View>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  backgroundImageContainer: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.7,
  },
  backgroundImage: {
    width: '100%',
    height: '100%',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
  },
  albumArt: {
    width: width * 0.7,
    height: width * 0.7,
    borderRadius: 10,
    marginBottom: 40,
  },
  infoContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    justifyContent: 'space-between',
    width: width * 0.85,
    marginBottom: 20,
  },
  textContainer: {
    alignItems: 'flex-end',
  },
  trackTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  artistName: {
    color: '#aaa',
    fontSize: 16,
  },
  heartIcon: {
    marginLeft: 10,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.9,
    marginBottom: 40,
  },
  timeText: {
    color: '#aaa',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 6,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 3,
    marginHorizontal: 8,
    overflow: 'hidden',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#1ad1c3',
    borderRadius: 3,
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: width * 0.7,
  },
  controlButton: {
    padding: 15,
  },
  playPauseButton: {
    backgroundColor: '#1ad1c3',
    width: 70,
    height: 70,
    borderRadius: 35,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 40,
  },
  bottomIconsContainer: {
    position: 'absolute',
    bottom: 20,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
  },
  bottomIcon: {
    padding: 10,
  },
});

export default ModernMusicPlayer;
üñºÔ∏è Resultado Esperado
Nome da m√∫sica e nome do artista alinhados √† direita.

√çcone de "gostei" abaixo do nome do artista, alinhado √† direita.

Layout moderno e organizado, mantendo o estilo do fundo desfocado e a capa do √°lbum.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar anima√ß√µes:

Use react-native-reanimated para animar o √≠cone de "gostei" ao ser clicado.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Adicionar funcionalidade de shuffle e repeat:

Implemente a l√≥gica para shuffle e repeat.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

e o nome do artista ? ele n devia estar do lado esquerdo emaixo da musica?
Ah, entendi agora! Voc√™ quer que o nome da m√∫sica fique √† direita e o nome do artista fique abaixo da m√∫sica, √† esquerda, com o √≠cone de "gostei" ao lado do artista. Vou ajustar o layout para atender a essa solicita√ß√£o.

üõ†Ô∏è Altera√ß√µes Realizadas
Ajuste no layout das informa√ß√µes da m√∫sica:

O nome da m√∫sica ficar√° √† direita.

O nome do artista ficar√° abaixo da m√∫sica, √† esquerda.

O √≠cone de "gostei" ficar√° ao lado do nome do artista.

Manuten√ß√£o do estilo atual:

O fundo desfocado, a capa do √°lbum e os controles permanecem inalterados.

üéØ C√≥digo Atualizado
Aqui est√° o c√≥digo completo com as altera√ß√µes:

tsx
Copy
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Dimensions, Image } from 'react-native';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';
import { MaterialIcons, Ionicons, MaterialCommunityIcons, FontAwesome } from '@expo/vector-icons';

const { width } = Dimensions.get('window');
const PROGRESS_BAR_WIDTH = width * 0.85;

// Track list
const tracks = [
  {
    id: 1,
    title: 'QUEM N√ÉO PODE ERRAR SOU EU',
    artist: 'Febem, Cersv',
    duration: 203, // in seconds
    artwork: require('./assets/images/capaFebem.jpg'),
  },
  {
    id: 2,
    title: 'Ai Calica',
    artist: 'pumapjl, LEALL, Babidi',
    duration: 187,
    artwork: require('./assets/images/capaPumapjl.jpg'),
  },
  {
    id: 3,
    title: 'Fim de Semana no Parque',
    artist: 'Racionais MCs',
    duration: 271,
    artwork: require('./assets/images/capaRacionais.jpg'),
  },
];

const ModernMusicPlayer: React.FC = () => {
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [isLiked, setIsLiked] = useState(false);

  const progressAnim = useSharedValue(0);
  const currentTrack = tracks[currentTrackIndex];

  // Simulate track playing when isPlaying is true
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isPlaying) {
      interval = setInterval(() => {
        setCurrentTime(prev => {
          if (prev >= currentTrack.duration) {
            handleNext();
            return 0;
          }
          return prev + 1;
        });
      }, 1000);
    }

    return () => clearInterval(interval);
  }, [isPlaying, currentTrackIndex]);

  // Update progress animation based on current time
  useEffect(() => {
    const progress = currentTime / currentTrack.duration;
    progressAnim.value = withTiming(progress * PROGRESS_BAR_WIDTH, { duration: 500 });
  }, [currentTime]);

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };

  const handleNext = () => {
    setCurrentTrackIndex((prev) => (prev + 1) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const handlePrevious = () => {
    setCurrentTrackIndex((prev) => (prev - 1 + tracks.length) % tracks.length);
    setCurrentTime(0);
    setIsLiked(false); // Reseta o estado de "gostei" ao trocar de m√∫sica
  };

  const toggleLike = () => {
    setIsLiked((prev) => !prev); // Alterna entre "gostei" e "n√£o gostei"
  };

  const formatTime = (seconds: number) => {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60);
    return `${min}:${sec < 10 ? '0' : ''}${sec}`;
  };

  const progressStyle = useAnimatedStyle(() => {
    return {
      width: progressAnim.value,
    };
  });

  const handleProgressGesture = (event: any) => {
    const { x } = event.nativeEvent;
    const progress = Math.max(0, Math.min(x, PROGRESS_BAR_WIDTH));
    progressAnim.value = progress;

    const newTime = (progress / PROGRESS_BAR_WIDTH) * currentTrack.duration;
    setCurrentTime(newTime);
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.playerContainer}>
        {/* Blurred Album Art Background */}
        <View style={styles.backgroundImageContainer}>
          <Image
            source={currentTrack.artwork}
            style={styles.backgroundImage}
            blurRadius={80}
          />
          <View style={styles.overlay} />
        </View>

        {/* Album Art */}
        <Image source={currentTrack.artwork} style={styles.albumArt} />

        {/* Track Info */}
        <View style={styles.infoContainer}>
          <Text style={styles.trackTitle} numberOfLines={1}>
            {currentTrack.title}
          </Text>
          <View style={styles.artistContainer}>
            <Text style={styles.artistName} numberOfLines={1}>
              {currentTrack.artist}
            </Text>
            <TouchableOpacity onPress={toggleLike} style={styles.heartIcon}>
              <FontAwesome name={isLiked ? 'heart' : 'heart-o'} size={24} color={isLiked ? '#1ad1c3' : '#fff'} />
            </TouchableOpacity>
          </View>
        </View>

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
          <View style={styles.progressBarContainer}>
            <PanGestureHandler onGestureEvent={handleProgressGesture}>
              <Animated.View style={styles.progressInteraction}>
                <Animated.View style={[styles.progressBar, progressStyle]} />
              </Animated.View>
            </PanGestureHandler>
          </View>
          <Text style={styles.timeText}>{formatTime(currentTrack.duration)}</Text>
        </View>

        {/* Control Buttons */}
        <View style={styles.controlsContainer}>
          {/* Shuffle */}
          <TouchableOpacity style={styles.controlButton}>
            <MaterialCommunityIcons name="shuffle-variant" size={24} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Previous */}
          <TouchableOpacity onPress={handlePrevious} style={styles.controlButton}>
            <MaterialIcons name="skip-previous" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Play/Pause */}
          <TouchableOpacity onPress={handlePlayPause} style={styles.playPauseButton}>
            <MaterialIcons name={isPlaying ? "pause" : "play-arrow"} size={36} color="#000000" />
          </TouchableOpacity>

          {/* Next */}
          <TouchableOpacity onPress={handleNext} style={styles.controlButton}>
            <MaterialIcons name="skip-next" size={36} color="#FFFFFF" />
          </TouchableOpacity>

          {/* Repeat */}
          <TouchableOpacity style={styles.controlButton}>
            <Ionicons name="repeat" size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        {/* Bottom Icons */}
        <View style={styles.bottomIconsContainer}>
          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialCommunityIcons name="devices" size={22} color="#888" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.bottomIcon}>
            <MaterialIcons name="queue-music" size={22} color="#888" />
          </TouchableOpacity>
        </View>
      </View>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  playerContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  backgroundImageContainer: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.7,
  },
  backgroundImage: {
    width: '100%',
    height: '100%',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.7)',
  },
  albumArt: {
    width: width * 0.7,
    height: width * 0.7,
    borderRadius: 10,
    marginBottom: 40,
  },
  infoContainer: {
    width: width * 0.85,
    alignItems: 'flex-end', // Alinha o t√≠tulo √† direita
    marginBottom: 20,
  },
  trackTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  artistContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  artistName: {
    color: '#aaa',
    fontSize: 16,
    marginRight: 10, // Espa√ßo entre o artista e o √≠cone de "gostei"
  },
  heartIcon: {
    marginLeft: 10,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: width * 0.9,
    marginBottom: 40,
  },
  timeText: {
    color: '#aaa',
    fontSize: 12,
    width: 35,
    textAlign: 'center',
  },
  progressBarContainer: {
    flex: 1,
    height: 6,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 3,
    marginHorizontal: 8,
    overflow: 'hidden',
  },
  progressInteraction: {
    width: '100%',
    height: '100%',
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#1ad1c3',
    borderRadius: 3,
  },
  controlsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: width * 0.7,
  },
  controlButton: {
    padding: 15,
  },
  playPauseButton: {
    backgroundColor: '#1ad1c3',
    width: 70,
    height: 70,
    borderRadius: 35,
    alignItems: 'center',
    justifyContent: 'center',
    marginHorizontal: 40,
  },
  bottomIconsContainer: {
    position: 'absolute',
    bottom: 20,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
  },
  bottomIcon: {
    padding: 10,
  },
});

export default ModernMusicPlayer;
üñºÔ∏è Resultado Esperado
Nome da m√∫sica √† direita.

Nome do artista abaixo da m√∫sica, √† esquerda.

√çcone de "gostei" ao lado do nome do artista.

Layout moderno e organizado, mantendo o estilo do fundo desfocado e a capa do √°lbum.

üöÄ Pr√≥ximos Passos (Opcional)
Adicionar anima√ß√µes:

Use react-native-reanimated para animar o √≠cone de "gostei" ao ser clicado.

Integrar com um backend:

Carregue as m√∫sicas e capas de √°lbuns dinamicamente.

Adicionar funcionalidade de shuffle e repeat:

Implemente a l√≥gica para shuffle e repeat.

Precisa de ajuda com algo espec√≠fico? √â s√≥ perguntar! üòä

New chat
Message DeepSeek
AI-generated, for reference only
